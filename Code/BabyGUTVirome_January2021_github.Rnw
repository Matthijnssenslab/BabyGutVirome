\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
\title{Infant Gut Microbiome: Virome}
\author{LB}
\maketitle
This document is an overview of the virome  analyses on the BaBel infant dataset in R. 
\subsection*{Set up}
First, we wil start with loading all packages needed in this script.
<<load libraries, warning=F, message=F>>=
library(ggplot2)
library(dplyr)
library(plyr)
library(reshape)
library(reshape2)
library(scales)
library(randomcoloR)
library(gridExtra)
library(grid)
library(viridis)
library(readr)
library(VennDiagram)
library(stringr)
library(phyloseq)
library(vegan)
library(tidyr)
library(data.table)
library(rstatix)

library("dunn.test")
library(metagenomeSeq)
library(biomformat)
library("eulerr")
library(Maaslin2)
library(lme4)
library(plotly)
library("rPython")
library(synchrony)
library(decontam)
library(rlist)
library(DirichletMultinomial)
library(Hmisc)
library(ggplot2)
library("igraph")
library(statnet)
library(intergraph)
library(RColorBrewer)
library(jcolors)
library(ggpubr)


@
Using one command we can check which versions of the packages are installed:
<<Check versions of all packages, message=F>>=
sessionInfo()
@
<<Make some color function, message=F>>=
PAL_LB <- c('#DFE07C','#7F8E39','#3F4521','#42858C','#205062','#1D3554','#513D30','#70513A','#AF8A5F')
show_col(get_palette(PAL_LB,8)[1:4]) 
show_col(get_palette(PAL_LB,10)) # the first 4 of 6
show_col(PAL_LB) # the first 4 of 6

PAL_LB_5 <- c('#513D30','#70513A','#AF8A5F','#42858C','#205062','#1D3554')
show_col(rev(PAL_LB_5)) 
show_col(rev(get_palette(PAL_LB_5,7)))

#7 needed

scale_fill_LB <- function(number_of_colors){
  structure(list(
scale_fill_manual(values = get_palette(palette = PAL_LB ,k=number_of_colors))   
))
}

scale_color_LB <- function(number_of_colors){
  structure(list(
scale_color_manual(values = get_palette(palette = PAL_LB ,k=number_of_colors))   
))
}
### for the gradient define a light and dark color:
lightcol="#DFE07C" # licht geel
darkcol="#1D3554" # donker blauw
scale_color_gradientn_LB <-function(){
  structure(list(
scale_color_gradientn(colours = c(lightcol,darkcol))))
}

scale_fill_gradientn_LB <-function(){
  structure(list(
scale_fill_gradientn(colours = c(lightcol,darkcol))))
}

# per infant
colors_LB <- colorRampPalette(c("orange", "darkmagenta", "turquoise"))(9)[1:8]

show_col(colors_LB)

scale_fill_LB_infants <- function(number_of_colors){
  structure(list(
    scale_fill_manual(values=colors_LB)
  ))
}
scale_color_LB_infants <- function(number_of_colors){
  structure(list(
    scale_color_manual(values=colors_LB)
  ))
}



##################################
theme_LB <- function () { 
    theme_light() 
}

@
<<LB Theme, message=F>>=
library(extrafont)

theme_LB <- function () { 
    theme_light() +     
    theme(text = element_text(size = 12, family =  "Helvetica"), 
        title = element_text(hjust = 0.5), axis.title.x = element_text(hjust = 0.5), 
        axis.title.y = element_text(hjust = 0.5), panel.grid.major.y = element_line(colour = "#D8D8D8"), 
        panel.grid.minor.y = element_blank(),plot.title = element_text(face = "bold"),
        panel.grid.minor.x = element_blank(), panel.border = element_blank(), 
        panel.background = element_blank(), legend.position = "right", 
        legend.key = element_rect(fill = "#FFFFFF00"))
}

#ggplot(iris, aes(Sepal.Length, Sepal.Width, colour = Species))+
#  geom_point()+
#  theme_LB()
@
<<Set Work directory>>=
Workdir='/Users/Leentje/Documents/PhD/ViromeAnalysis_Jan2020/'
#  make directory of  the day
dir.create(paste(Workdir, format(Sys.time(), "%Y-%m-%d"), "/", sep=""))
@
\section{Prokaryotic Viruses}
\subsection*{Make a Phyloseq object}
<<PV: Make phyloseq object, message=F>>=

## No Normalisation
meta.virome <- read.csv(paste(Workdir, "Data_Github/ProkaryoticVirome/NoNormalisation/meta.virome.csv", sep=""), row.names=1)

meta.virome$Consistency <- as.character(meta.virome$Consistency)

OTU.virome <- read.csv(paste(Workdir, "Data_Github/ProkaryoticVirome/NoNormalisation/OTU.virome.csv", sep=""), row.names=1)
colnames(OTU.virome) <- gsub('\\.','-',colnames(OTU.virome))

tax.virome <- read.csv(paste(Workdir, "Data_Github/ProkaryoticVirome/NoNormalisation/tax.virome.csv", sep=""), row.names=1)

ps_virome_VIRUS_ProkaryoticVirome_reads <- phyloseq(otu_table(t(OTU.virome), taxa_are_rows=T), sample_data(meta.virome), tax_table(as.matrix(tax.virome)))
ps_virome_VIRUS_ProkaryoticVirome_reads_abundance <- transform_sample_counts(ps_virome_VIRUS_ProkaryoticVirome_reads, function(OTU) OTU/sum(OTU))


## Rarefied data
meta.virome <- read.csv(paste(Workdir, "Data_Github/ProkaryoticVirome/Rarefied/meta.virome.csv", sep=""), row.names=1)
meta.virome$Consistency <- as.character(meta.virome$Consistency)
OTU.virome <- read.csv(paste(Workdir, "Data_Github/ProkaryoticVirome/Rarefied/OTU.virome.csv", sep=""), row.names=1)
colnames(OTU.virome) <- gsub('\\.','-',colnames(OTU.virome))
tax.virome <- read.csv(paste(Workdir, "Data_Github/ProkaryoticVirome/Rarefied/tax.virome.csv", sep=""), row.names=1)
ps_virome_r2_VIRUS_ProkaryoticVirome_reads <- phyloseq(otu_table(t(OTU.virome), taxa_are_rows=T), sample_data(meta.virome), tax_table(as.matrix(tax.virome))) %>% prune_taxa(taxa_sums(.) > 0, .)
ps_virome_r2_VIRUS_ProkaryoticVirome_reads_abundance <- transform_sample_counts(ps_virome_r2_VIRUS_ProkaryoticVirome_reads, function(OTU) OTU/sum(OTU))


@
\subsection*{Make some metadata variables to make plotting easier}
<< Load Metadata info, to make plotting easier>>=

# first time day care
S003_DC <- c("S003",148) #april2014
S004_DC <- c("S004",125)
S005_DC <- c("S005",187)
S006_DC <- c("S006",86)
S007_DC <- c("S007",151)
S009_DC <- c("S009",90)
S010_DC <- c("S010",97) # navragen
S011_DC <- c("S011",213)
DC <- as.data.frame(rbind(S003_DC,S004_DC,S005_DC,S006_DC,S007_DC,S009_DC,S010_DC,S011_DC))
colnames(DC) <- c("InfantID","X.days")
DC$X.days<- as.numeric(as.character(DC$X.days))

# vaccinations
S003_VACC <- c("S003",70,98,126)
S004_VACC <- c("S004",63,91,119)
S005_VACC <- c("S005",61,89,124)
S006_VACC <- c("S006",58,86,115)
S007_VACC <- c("S007",67,103,172)
S009_VACC <- c("S009",62,100,142)
S010_VACC <- c("S010",61,96,124)
S011_VACC <- c("S011",57,85,113)
VACC <- as.data.frame(rbind(S003_VACC,S004_VACC,S005_VACC,S006_VACC,S007_VACC,S009_VACC,S010_VACC,S011_VACC))
VACC <- melt(VACC, id.vars = 'V1')
VACC$variable <- NULL
colnames(VACC) <- c("InfantID","X.days")
VACC$X.days<- as.numeric(as.character(VACC$X.days))

#diet
diet <- read.csv(paste(Workdir, "Data_Github/DIET_.csv", sep=""), sep = ";")
diet$ymin <- NA
diet$ymin[which(diet$DIET == "Breast")] <- 0.3
diet$ymin[which(diet$DIET == "Formula")] <- 0.2
diet$ymin[which(diet$DIET == "Vegetables")] <- 0.1
diet$ymin[which(diet$DIET == "Fruit")] <- 0
diet <- diet[order(diet$InfantID, decreasing=T),]
diet$InfantID <- factor(diet$InfantID, levels=unique(diet$InfantID))



# metadata
vaccc <- VACC[,1:2]
dcc <- DC[,1:2]
diett <- diet[,1:4]

Infants <- unique(meta.virome$InfantID)
@
<<Effects to test Virome: simplified ICD.10 and ATC: COMMON>>=
EFFECTS_simple_Virome <- c('InfantID', 'X.days', 'Siblings','FurryPets', 'Secretor','Lewis','ABO',# 7 infant
                 'FOOD',
                  'Consistency', #4 Consistency
                  "ICD_simple_Diarrea","ICD_simple_GeneralSicknessSymptoms",
                 "ICD_simple_Fever","ICD_simple_respiratory",
                  "ATC_level2_J01" ,  "ATC_level2_M01",  "ATC_level2_N02", # 
                  'DayCare')# Environment
                  

EFFECTS_Categories_simple_Virome <- as.data.frame(cbind(EFFECTS_simple_Virome, c('Infant',  'Infant', 'Infant','Infant', 'Infant', 'Infant', 'Infant', 
                  'Diet',
                  'Consistency', # Consistency
                  rep('ICD_category',4),
                  rep('ATC_category',3),
                  'Environment'))) # Environment

colnames(EFFECTS_Categories_simple_Virome) <- c('Effect','Category')

FIXEDEFFECTS_simple_Virome <- EFFECTS_Categories_simple_Virome$Effect[!EFFECTS_Categories_simple_Virome$Effect == 'InfantID']
RANDOMEFFECT <- c('InfantID')
VARIABLES_simple_Virome <- append(as.character(FIXEDEFFECTS_simple_Virome),RANDOMEFFECT)


FIXEDEFFECTS_simple_Virome_categorical <- FIXEDEFFECTS_simple_Virome[!FIXEDEFFECTS_simple_Virome %in% c('X.days')]
FIXEDEFFECTS_simple_Virome_ctu <- FIXEDEFFECTS_simple_Virome[FIXEDEFFECTS_simple_Virome %in% c('X.days')]



@

\subsection*{Check phages}
<< PV: Create Output Directories,message=F>>=
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/", sep=""))
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/", sep=""))

@
<< Prepare, message=F>>=
# load MasterTable
MasterTable_150 <- read.csv(paste(Workdir, "Data_Github/MasterTable_150.csv", sep=""))
colnames(MasterTable_150) <- gsub('\\.','-',colnames(MasterTable_150))
rownames(MasterTable_150)  <- MasterTable_150$X
# make extra column in mastertable
Reads  <-  as.data.frame(taxa_sums(ps_virome_r2_VIRUS_ProkaryoticVirome_reads))
Reads$PhageReads_filtered <-  Reads[,]
Reads <- Reads[rev(order(Reads$PhageReads_filtered)),]
Reads$Top <- paste('Top_', 1:nrow(Reads), sep="")
Reads$top <- 1:nrow(Reads)

for (c in  rownames(Reads)){
MasterTable_150$PhageReads_filtered[rownames(MasterTable_150) == c] <- Reads$PhageReads_filtered[rownames(Reads) == c]
MasterTable_150$PhageReads_top[rownames(MasterTable_150) == c] <- Reads$Top[rownames(Reads) == c]
MasterTable_150$PhageReads_top_[rownames(MasterTable_150) == c] <- Reads$top[rownames(Reads) == c]
}
@
<< CheckV, message=F>>=
CheckV <- read.csv(paste(Workdir,"Data_Github/CheckV.csv", sep=""), row.names=1)
## Length histogram
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageLength_distribution.pdf",sep=""))
ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads), ], aes(x=Length) )+geom_histogram()+theme_LB()+ylab("Number Of Contigs")+ xlab("ContigLength")
dev.off()
## reads histogram
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageReads_distribution.pdf",sep=""))
ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads), ], aes(x=log10(PhageReads_filtered)))+geom_histogram()+theme_LB()+ylab("Number Of Reads")+ xlab("Read count (log10)")
dev.off()
## CheckV quality~ abundance
MasterTable_150$CheckV_quality  <- factor(MasterTable_150$CheckV_quality, levels=c("Complete","High-quality","Medium-quality","Low-quality","Not-determined"))
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageReads_perCheckVqualitygroup.pdf",sep=""))
ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),], aes(x=CheckV_quality,fill=CheckV_quality, y=log10(PhageReads_filtered)))+
geom_boxplot()+theme_LB()+scale_fill_LB(5)
dev.off()
## CheckV quality~ length
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageLength_perCheckVqualitygroup.pdf",sep=""))
ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),], aes(x=CheckV_quality,fill=CheckV_quality, y=Length))+
geom_boxplot()+theme_LB()+scale_fill_LB(5)
dev.off()

## CheckV completeness ~ abundance
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageReads_perCheckVcompleteness.pdf",sep=""))
MasterTable_150$CheckV_completeness  <-  as.numeric(as.character(MasterTable_150$CheckV_completeness))
ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),], aes(x=CheckV_completeness,color=CheckV_quality, y=log10(PhageReads_filtered)))+geom_point()+theme_LB()+scale_color_LB(5)
dev.off()

MasterTable_150$PhageReads_filtered_log10 <- log10(MasterTable_150$PhageReads_filtered)

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhagelogReads_perCheckVcompleteness_pearson.pdf",sep=""))

ggscatter(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),], x = "CheckV_completeness", y = "PhageReads_filtered_log10",
          add = "reg.line",                           # Add regression line
          conf.int = TRUE,                            # Add confidence interval
          add.params = list(color = "blue",
                            fill = "lightgray")
          )+ theme_LB() + xlab('Completeness of the phage contigs (CheckV)')+
  stat_cor(method = "pearson")  # Add correlation coefficient
dev.off()

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageReads_perCheckVcompleteness_pearson.pdf",sep=""))
ggscatter(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),], x = "CheckV_completeness", y = "PhageReads_filtered",
          add = "reg.line",                           # Add regression line
          conf.int = TRUE,                            # Add confidence interval
          add.params = list(color = "blue",
                            fill = "lightgray")
          )+ theme_LB() + xlab('Completeness of the phage contigs (CheckV)')+
  stat_cor(method = "pearson")  # Add correlation coefficientdev.off()
dev.off()

## CheckV completeness ~ length

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageLength_perCheckVcompleteness.pdf",sep=""))
ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),], aes(x=CheckV_completeness,color=CheckV_quality, y=(Length)))+geom_point()+theme_LB()+scale_color_LB(5)
dev.off()

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/CheckV/PhageLength_perCheckVcompleteness_pearson.pdf",sep=""))
ggscatter(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),], x = "CheckV_completeness", y = "Length",
          add = "reg.line",                                 # Add regression line
          conf.int = TRUE,                                  # Add confidence interval
          add.params = list(color = "blue",
                            fill = "lightgray")
          )+ theme_LB() + xlab('Completeness of the phage contigs (CheckV)')+
  stat_cor(method = "pearson")  # Add correlation coefficientdev.off()
dev.off()


#Determine treshold
## Quality > 50%

test <- MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_reads),colnames(MasterTable_150) %in% c("CheckV_quality","PhageBin",'PhageReads_filtered','PhageReads_top','PhageReads_top_', 'CheckV_completeness','CheckV_contamination')]
test$CheckV_completeness[is.na(test$CheckV_completeness)] <- 0
test <- test[order(test$PhageReads_top_),]
test$CheckV_completeness <- as.numeric(as.character(test$CheckV_completeness))
dim(test[test$CheckV_completeness >= 50,]) #  327
sum(test$PhageReads_filtered[test$CheckV_completeness >= 50], na.rm = T) #  38213458 reads
sum(test$PhageReads_filtered[test$CheckV_completeness >= 50], na.rm = T)*100/sum(Reads$PhageReads_filtered) #  85,5 % of the phage reads

# combine TAXONOMY assigned  by different tools (blastn, diamond, checkV and vcontact2)
TAXATOKEEP <- rownames(test[test$CheckV_completeness >= 50,]) #  327

ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads <- prune_taxa(TAXATOKEEP, ps_virome_r2_VIRUS_ProkaryoticVirome_reads) %>% prune_taxa(taxa_sums(.) > 0, .)
ps_virome_VIRUS_ProkaryoticVirome_CompleteCheckV_reads <- prune_taxa(TAXATOKEEP, ps_virome_VIRUS_ProkaryoticVirome_reads) %>% prune_taxa(taxa_sums(.) > 0, .)

summary(MasterTable_150$Length[rownames(MasterTable_150) %in% TAXATOKEEP])
@
<< Select phages to investigate in more detail for the dynamics, message=F>>=
DYNAMICS_TRESHOLD <- 2 # (all phages with presence smaller than 2, will be removed)
# presence columns based on rarefied reads
Samples <- unique(sample_data(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)$Sample.ID)
MasterTable_150_counts <- as.data.frame(otu_table(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))

MasterTable_150_counts[, colnames(MasterTable_150_counts) %in% Samples] <- ifelse(MasterTable_150_counts[, colnames(MasterTable_150_counts) %in% Samples] < 1, 0, 1)
MasterTable_150_counts <- MasterTable_150_counts[,colnames(MasterTable_150_counts) %in% Samples]

Presence_r2_S003 <- rowSums(MasterTable_150_counts[, grepl("S003", colnames(MasterTable_150_counts))])
Presence_r2_S004 <- rowSums(MasterTable_150_counts[, grepl("S004", colnames(MasterTable_150_counts))] )
Presence_r2_S005 <- rowSums(MasterTable_150_counts[, grepl("S005", colnames(MasterTable_150_counts))] )
Presence_r2_S006 <- rowSums(MasterTable_150_counts[, grepl("S006", colnames(MasterTable_150_counts))] )
Presence_r2_S007 <- rowSums(MasterTable_150_counts[, grepl("S007", colnames(MasterTable_150_counts))] )
Presence_r2_S009 <- rowSums(MasterTable_150_counts[, grepl("S009", colnames(MasterTable_150_counts))] )
Presence_r2_S010 <- rowSums(MasterTable_150_counts[, grepl("S010", colnames(MasterTable_150_counts))] )
Presence_r2_S011 <- rowSums(MasterTable_150_counts[, grepl("S011", colnames(MasterTable_150_counts))] )

MasterTable_150$Presence_r2_S003 <- 0
MasterTable_150$Presence_r2_S004 <- 0
MasterTable_150$Presence_r2_S005 <- 0
MasterTable_150$Presence_r2_S006 <- 0
MasterTable_150$Presence_r2_S007 <- 0
MasterTable_150$Presence_r2_S009 <- 0
MasterTable_150$Presence_r2_S010 <- 0
MasterTable_150$Presence_r2_S011 <- 0

for (r  in  rownames(MasterTable_150_counts)){
MasterTable_150$Presence_r2_S003[rownames(MasterTable_150)  == r] <- Presence_r2_S003[r]
MasterTable_150$Presence_r2_S004[rownames(MasterTable_150)  == r] <- Presence_r2_S004[r]
MasterTable_150$Presence_r2_S005[rownames(MasterTable_150)  == r] <- Presence_r2_S005[r]
MasterTable_150$Presence_r2_S006[rownames(MasterTable_150)  == r] <- Presence_r2_S006[r]
MasterTable_150$Presence_r2_S007[rownames(MasterTable_150)  == r] <- Presence_r2_S007[r]
MasterTable_150$Presence_r2_S009[rownames(MasterTable_150)  == r] <- Presence_r2_S009[r]
MasterTable_150$Presence_r2_S010[rownames(MasterTable_150)  == r] <- Presence_r2_S010[r]
MasterTable_150$Presence_r2_S011[rownames(MasterTable_150)  == r] <- Presence_r2_S011[r]
}

MasterTable_150$Presence_r2_dynamics_S003 <- MasterTable_150$Presence_r2_S003
MasterTable_150$Presence_r2_dynamics_S004 <- MasterTable_150$Presence_r2_S004
MasterTable_150$Presence_r2_dynamics_S005 <- MasterTable_150$Presence_r2_S005
MasterTable_150$Presence_r2_dynamics_S006 <- MasterTable_150$Presence_r2_S006
MasterTable_150$Presence_r2_dynamics_S007 <- MasterTable_150$Presence_r2_S007
MasterTable_150$Presence_r2_dynamics_S009 <- MasterTable_150$Presence_r2_S009
MasterTable_150$Presence_r2_dynamics_S010 <- MasterTable_150$Presence_r2_S010
MasterTable_150$Presence_r2_dynamics_S011 <- MasterTable_150$Presence_r2_S011

MasterTable_150$Presence_r2_dynamics_S003[MasterTable_150$Presence_r2_dynamics_S003  < DYNAMICS_TRESHOLD] <- 0
MasterTable_150$Presence_r2_dynamics_S004[MasterTable_150$Presence_r2_dynamics_S004  < DYNAMICS_TRESHOLD] <- 0
MasterTable_150$Presence_r2_dynamics_S005[MasterTable_150$Presence_r2_dynamics_S005  < DYNAMICS_TRESHOLD] <- 0
MasterTable_150$Presence_r2_dynamics_S006[MasterTable_150$Presence_r2_dynamics_S006  < DYNAMICS_TRESHOLD] <- 0
MasterTable_150$Presence_r2_dynamics_S007[MasterTable_150$Presence_r2_dynamics_S007  < DYNAMICS_TRESHOLD] <- 0
MasterTable_150$Presence_r2_dynamics_S009[MasterTable_150$Presence_r2_dynamics_S009  < DYNAMICS_TRESHOLD] <- 0
MasterTable_150$Presence_r2_dynamics_S010[MasterTable_150$Presence_r2_dynamics_S010  < DYNAMICS_TRESHOLD] <- 0
MasterTable_150$Presence_r2_dynamics_S011[MasterTable_150$Presence_r2_dynamics_S011  < DYNAMICS_TRESHOLD] <- 0

MasterTable_150$Presence_r2_dynamics_NumberOfSamples[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_dynamics_S',colnames(MasterTable_150))] )
MasterTable_150$Presence_r2_dynamics_NumberOfInfants[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_dynamics_S',colnames(MasterTable_150))] >0 )

MasterTable_150$Presence_r2_dynamics_NumberOfInfants_noS011[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_dynamics_S',colnames(MasterTable_150)) &!grepl('Presence_r2_dynamics_S011',colnames(MasterTable_150)) ] >0 )

MasterTable_150$Presence_r2_dynamics_NumberOfSamples_noS011[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_dynamics_S',colnames(MasterTable_150)) &!grepl('Presence_r2_dynamics_S011',colnames(MasterTable_150)) ] )



MasterTable_150$Presence_r2_NumberOfSamples[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_S',colnames(MasterTable_150))] )
MasterTable_150$Presence_r2_NumberOfInfants[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_S',colnames(MasterTable_150))] >0 )

MasterTable_150$Presence_r2_NumberOfInfants_noS011[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_S',colnames(MasterTable_150)) &!grepl('Presence_r2_S011',colnames(MasterTable_150)) ] >0 )

MasterTable_150$Presence_r2_NumberOfSamples_noS011[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)] <- rowSums(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('Presence_r2_S',colnames(MasterTable_150)) &!grepl('Presence_r2_S011',colnames(MasterTable_150)) ] )

#CheckV_CORE_taxa <- rownames(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$Presence_r2_dynamics_NumberOfSamples >0 ,]) #  327 ->  303
CheckV_CORE_taxa <- rownames(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$Presence_r2_NumberOfSamples >1 ,]) #  327 ->  305

ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads <- prune_taxa(CheckV_CORE_taxa, ps_virome_r2_VIRUS_ProkaryoticVirome_reads) %>% prune_taxa(taxa_sums(.) > 0, .)
ps_virome_VIRUS_ProkaryoticVirome_CompleteCheckV_reads <- prune_taxa(CheckV_CORE_taxa, ps_virome_VIRUS_ProkaryoticVirome_reads) %>% prune_taxa(taxa_sums(.) > 0, .)



@
<< Taxonomy = Fig 1b , message=F >>=

CheckV_CORE <- CheckV[CheckV$contig_id %in% CheckV_CORE_taxa,]
  CheckV_CORE$Annotation_family <- ''
for (fam in c('Microviridae','Podoviridae','Myoviridae','Siphoviridae')){
CheckV_CORE$Annotation_family[grepl(fam,CheckV_CORE$Annotation_lineage)] <- fam
}
for (genus in c('unclassified Siphoviridae','unclassified Myoviridae','unclassified Picovirinae','Cepunavirus','Lambdavirus','Pahexavirus','Salasvirus','unclassified Microviridae','Rosenblumvirus','Muvirus','Biseptimavirus','unclassified bacterial viruses','Moineauvirus','Skunavirus','Salasvirus','CressDNAParvo')){
CheckV_CORE$Annotation_genus[grepl(genus,CheckV_CORE$Annotation_lineage)] <- genus
}

MasterTable_150$TaxonomicAssignment_family <- '_No'
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Taxonomy/", sep=""))

MasterTable_150$TaxonomicAssignment_family[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$TaxonomicAssignment_family == "_No" & (
  MasterTable_150$BLASTN_completeDB_family %in% c("crAss-like viruses") |      
    MasterTable_150$DIAMOND_completeDB_family %in% c("crAss-like viruses") |    
    MasterTable_150$CAT_family %in% c("crAss-like viruses")|
   MasterTable_150$VC_Genus %in% c("crAss-like viruses"))] <- "crAss-like viruses"

MasterTable_150$TaxonomicAssignment_family[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$TaxonomicAssignment_family == "_No" & (
  MasterTable_150$BLASTN_completeDB_family %in% c("Herelleviridae") |      
    MasterTable_150$DIAMOND_completeDB_family %in% c("Herelleviridae") |    
    MasterTable_150$CAT_family %in% c("Herelleviridae")| 
   MasterTable_150$VC_Family %in% c("Herelleviridae"))] <- "Herelleviridae"
MasterTable_150$TaxonomicAssignment_family[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$TaxonomicAssignment_family == "_No" & (
  MasterTable_150$BLASTN_completeDB_family %in% c("Microviridae") |      
    MasterTable_150$DIAMOND_completeDB_family %in% c("Microviridae") |    
    MasterTable_150$CAT_family %in% c("Microviridae")|
   MasterTable_150$VC_Family %in% c("Microviridae"))] <- "Microviridae"
MasterTable_150$TaxonomicAssignment_family[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$TaxonomicAssignment_family == "_No" & (
  MasterTable_150$BLASTN_completeDB_family %in% c("Myoviridae") |      
    MasterTable_150$DIAMOND_completeDB_family %in% c("Myoviridae") |    
    MasterTable_150$CAT_family %in% c("Myoviridae")|
   MasterTable_150$VC_Family %in% c("Myoviridae"))] <- "Myoviridae"
MasterTable_150$TaxonomicAssignment_family[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$TaxonomicAssignment_family == "_No" & (
  MasterTable_150$BLASTN_completeDB_family %in% c("Podoviridae") |      
    MasterTable_150$DIAMOND_completeDB_family %in% c("Podoviridae") |    
    MasterTable_150$CAT_family %in% c("Podoviridae")|
   MasterTable_150$VC_Family %in% c("Podoviridae"))] <- "Podoviridae"
MasterTable_150$TaxonomicAssignment_family[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$TaxonomicAssignment_family == "_No" & (
  MasterTable_150$BLASTN_completeDB_family %in% c("Siphoviridae") |      
    MasterTable_150$DIAMOND_completeDB_family %in% c("Siphoviridae") |    
    MasterTable_150$CAT_family %in% c("Siphoviridae")|
   MasterTable_150$VC_Family %in% c("Siphoviridae"))] <- "Siphoviridae"
MasterTable_150$TaxonomicAssignment_family_CheckV <- '_No'

for (r in  CheckV$contig_id[CheckV$contig_id%in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)]){
  MasterTable_150$TaxonomicAssignment_family_CheckV[rownames(MasterTable_150) == r] <- CheckV_CORE$Annotation_family[CheckV_CORE$contig_id== r]

}

MasterTable_150$TaxonomicAssignment_family_CheckV[MasterTable_150$TaxonomicAssignment_family_CheckV == ""] <- '_No'

# good: always consistent at family level!! 
MasterTable_150$TaxonomicAssignment_family[MasterTable_150$TaxonomicAssignment_family == "_No" & !MasterTable_150$TaxonomicAssignment_family_CheckV == "_No" ] <- MasterTable_150$TaxonomicAssignment_family_CheckV[MasterTable_150$TaxonomicAssignment_family == "_No" & !MasterTable_150$TaxonomicAssignment_family_CheckV == "_No" ]

A <- ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads),], aes(x=TaxonomicAssignment_family,fill=TaxonomicAssignment_family, y=PhageReads_filtered))+geom_boxplot()+theme_LB()+scale_fill_LB(7) 

B<- ggplot(MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads),], aes(x=TaxonomicAssignment_family,fill=TaxonomicAssignment_family))+geom_bar()+theme_LB()+scale_fill_LB(7) 
c <- aggregate(PhageReads_filtered~TaxonomicAssignment_family,MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads),], sum)
c$percentage <- c$PhageReads_filtered*100/sum(c$PhageReads_filtered)
C <-  ggplot(c, aes(x="",fill=TaxonomicAssignment_family, y=PhageReads_filtered))+geom_bar(stat="identity")+theme_LB()+scale_fill_LB(7)+  coord_polar("y", start = 0)

d <- aggregate(PhageReads_filtered~TaxonomicAssignment_family,MasterTable_150[rownames(MasterTable_150)  %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads),], length)
colnames(d)[2]  <-  'PhageContigs'
d$percentage <- d$PhageContigs*100/sum(d$PhageContigs)

D <-  ggplot(d, aes(x="",fill=TaxonomicAssignment_family, y=PhageContigs))+geom_bar(stat="identity")+theme_LB()+scale_fill_LB(7)+  coord_polar("y", start = 0)

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Taxonomy/PhageTaxonomy_basedon_completeNCBI_VCONTACT_CAT_READS_COUNTS.pdf",sep=""), height=3, width=10)
grid.arrange(C,D, nrow = 1)
dev.off()
write.csv(c,paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Taxonomy/PhageTaxonomy_reads_basedon_completeNCBI_VCONTACT_CAT.csv",sep="") )
write.csv(d,paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Taxonomy/PhageTaxonomy_contigs_basedon_completeNCBI_VCONTACT_CAT.csv",sep="") )

@

\subsection*{Sharing}
<<shared = Fig 1d>>=
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Sharing/", sep=""))

table(MasterTable_150$Presence_r2_NumberOfInfants)
#
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Sharing/PhageCORE_NumberofInfantsNumberofContigs.pdf",sep=""), height=  4, width = 6)
ggplot(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads),], aes(x=Presence_r2_NumberOfInfants)  )+ geom_bar() +    geom_text(stat='count', aes(label=..count..), vjust=-1)+theme_LB()
dev.off()
@
<<multipresent phages, save to table>>=
#present in >=50%

multipresent <- rownames(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$Presence_r2_NumberOfInfants >= 4,])

write.csv(MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_VIRUS_ProkaryoticVirome_CompleteCheckV_reads) & MasterTable_150$Presence_r2_NumberOfInfants >= 4, colnames(MasterTable_150) %in% c('Presence_r2_NumberOfSamples','Presence_r2_NumberOfInfants','GMMS','Time_first','Time_last','Lifestyle_LB','Lifestyle_LB_onlyintegraserepressor','CheckV_completeness','CheckV_prophage','TaxonomicAssignment_family') ] , '/Users/Leentje/Desktop/Supplementary_multipresentphages.csv') 

@
<<ED Fig 4c >>=
# present in 8
omnipresent <- c('NODE_11_length_17262_cov_209_421821_S011-17','NODE_13_length_18316_cov_102_888426_S010-149')
dcc <- DC[,1:2]
diett <- diet[,1:4]

Omni <- psmelt(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads %>% prune_taxa(omnipresent,.))
Omni_ <- aggregate(Abundance ~Formula+Sample+X.days+InfantID, Omni,sum)
ggplot(Omni_, aes(x=Formula, y=Abundance))+geom_boxplot()+theme_LB()
wilcox.test(Abundance~Formula, Omni_, conf.int=TRUE, paired = FALSE, alternative = "two.sided")
 (Omni_%>%  rstatix::wilcox_effsize(Abundance ~ Formula, paired = FALSE))$effsize


Omni_$Abundance_relative <- Omni_$Abundance / max(sample_sums(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))
OM <- ggplot(Omni_, aes(x=X.days, y=Abundance)) + 
  facet_wrap(~InfantID,  ncol=4) + 
  geom_point()+
  scale_color_LB(2)+
  ylab('Number of Rarefied Reads') + 
  xlab("Days after birth") + 
  theme_LB()+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.01*20000,yend=-0.01*20000), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.03*20000,yend=-0.03*20000), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.04*20000,yend=-0.04*20000), color="Darkolivegreen2",inherit.aes = F)+
geom_point(aes(x=X.days, y=0), size=1, color="black")

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    OM <- OM + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-0.02*20000,yend=-0.02*20000), color="Deepskyblue3",inherit.aes = F)
          }
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Sharing/r2_Phage_CORE_formulalink.pdf",sep="") ,width = 10, height = 6 )
print(OM)
dev.off()


OM <- ggplot(Omni_, aes(x=X.days, y=Abundance_relative)) + 
  facet_wrap(~InfantID,  ncol=4) + 
  geom_point()+
  scale_color_LB(2)+
  ylab('Relative abundance') + 
  xlab("Days after birth") + 
  theme_LB()+
 # geom_vline(size=1.5, data = dcc, mapping = aes(xintercept = X.days), colour = "red")+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.001*3,yend=-0.001*3), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.003*3,yend=-0.003*3), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.004*3,yend=-0.004*3), color="Darkolivegreen2",inherit.aes = F)+
geom_point(aes(x=X.days, y=0), size=1, color="black")

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    OM <- OM + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-0.002*3,yend=-0.002*3), color="Deepskyblue3",inherit.aes = F)
          }
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Sharing/r2_relativeab_Phage_CORE_formulalink.pdf",sep="") ,width = 12, height = 5)
print(OM)
dev.off()
@
<<ED Fig crass>>=

## crass
crass <- rownames(MasterTable_150)[grepl("_96618_|_97133_", rownames(MasterTable_150))]
CRASS_ <- aggregate(Abundance ~Formula+Sample+X.days+InfantID, psmelt(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads %>% prune_taxa(crass,.)),sum)
length(unique(CRASS_$InfantID[CRASS_$Abundance >0])) / length(unique(CRASS_$InfantID))
length(unique(CRASS_$Sample[CRASS_$Abundance >0])) / length(unique(CRASS_$Sample))



@
\subsection*{Dynamics}
<< Phage richness, Fig 1e >>=
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Richness/", sep=""))

LDA_Samples = sample_data( subset_samples(ps_virome_VIRUS_ProkaryoticVirome_CompleteCheckV_reads, !is.na(LongitudinalDynamics)) %>% 
  subset_samples(., ICD.10_level1_N == "N")  %>% #  urinary  tract infections
  subset_samples(., ICD.10_level2_K59 == "N")  %>% # constipation...
  subset_samples(., ICD.10_level2_K21 == "N")  %>% # reflux
  subset_samples(., ICD.10_level2_B37 == "N")  %>% # fungal infection
  subset_samples(., ICD.10_level1_R == "N") )$Sample.ID

TABLE <- subset_samples(ps_virome_VIRUS_ProkaryoticVirome_CompleteCheckV_reads, Sample.ID %in% LDA_Samples) %>%  prune_taxa(taxa_sums(.) > 0, .)

RICHNESS <- estimate_richness(TABLE, measures = c("Observed", "Shannon"))
RICHNESS$Sample.ID <- gsub('\\.','-',rownames(RICHNESS))


All_measures <- plot_richness(TABLE, x= "X.days", color="InfantID", nrow =2, measures = c("Observed", "Shannon"))+
  geom_line()+
 # scale_color_manual(values= rev(c(viridis(4,1, begin=0.2, end = 0.9), rev(plasma(4,1, begin=0.3, end = 1)))))+
  scale_color_LB_infants(8)+
  geom_smooth(colour='black', span=0.25, method="loess")+
  ggtitle(paste("Alpha Diversity, LDA samples, BIG phages", sep="")) + 
  theme_LB() +
  xlab("Days after birth")+
  facet_wrap(~variable,scales="free_y", ncol=1)

  pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Richness/Alphadiversity_BIG_LDA.pdf", sep=""))
  print(All_measures)
  dev.off()
  
  
  @ 
<<We load and prepare the 16S files >>=
BabyGut16S_metadata <- read.csv(paste(Workdir, "/Data_Github/BabyGut16s/BabyGut16S_metadata.csv",sep=""), row.names=1)
BabyGut16S_metadata$Consistency[BabyGut16S_metadata$Consistency == 1] <- "Aqueous"
BabyGut16S_metadata$Consistency[BabyGut16S_metadata$Consistency == 2] <- "Soft"
BabyGut16S_metadata$Consistency[BabyGut16S_metadata$Consistency == 3] <- "Solid"
BabyGut16S_otu <-  read.csv(paste(Workdir, "/Data_Github/BabyGut16s/BabyGut16S_otu.csv",sep=""), row.names=1)
BabyGut16S_tax <-  read.csv(paste(Workdir, "/Data_Github/BabyGut16s/BabyGut16S_tax.csv",sep=""), row.names=1)

BabyGut16S_ps <- phyloseq(otu_table(BabyGut16S_otu, taxa_are_rows=F), sample_data(BabyGut16S_metadata), tax_table(as.matrix(BabyGut16S_tax)))
BabyGut16S_ps_abundance <- transform_sample_counts(BabyGut16S_ps, function(OTU) OTU/sum(OTU))

Infants <- unique(BabyGut16S_metadata$InfantID)
LDA_Samples_16S <- BabyGut16S_metadata$Sample.ID[BabyGut16S_metadata$LDA == 1]
Samples <- BabyGut16S_metadata$Sample.ID

# import identified GMMS in bacteriome data
Clusters <- read.csv(paste(Workdir, "/Data_Github/BabyGut16s/OptimisationBIC_statistics_persample_setseed_1.csv",sep=""))
Clusters <- unique(Clusters[,c('Sample.ID','Cluster')])

COLORS <- as.data.frame(cbind(unique(sort(Clusters$Cluster)), unique(sort(Clusters$Cluster))))
colnames(COLORS) <- c('Cluster','Color')
COLORS$Color <-   get_palette(palette = PAL_LB, k = 8)[1:nrow(COLORS)] 

#
table_bacteria <- psmelt(BabyGut16S_ps_abundance)
table_bacteria_tax <- table_bacteria[, colnames(table_bacteria) %in% c('OTU','OTU_short','Genus','Family','Phylum','Class')]
names <- as.data.frame(unique(table_bacteria[,c(2,5)])) %>% mutate_all(as.character)
table_bacteria <- dcast(table_bacteria,  OTU ~ Sample, value.var="Abundance")
for (c in 2:ncol(table_bacteria)){
colnames(table_bacteria)[c] <-  names$Sample.ID[names$Sample == colnames(table_bacteria)[c]] 
}

table_bacteria_counts <- table_bacteria
table_bacteria_counts[, colnames(table_bacteria_counts) %in% Samples] <- ifelse(table_bacteria_counts[, colnames(table_bacteria_counts) %in% Samples] < 0.00001, 0, 1)

table_bacteria$Presence_S003 <- rowSums(table_bacteria_counts[, grepl("S003", colnames(table_bacteria_counts))])
table_bacteria$Presence_S004 <- rowSums(table_bacteria_counts[, grepl("S004", colnames(table_bacteria_counts))] )
table_bacteria$Presence_S005 <- rowSums(table_bacteria_counts[, grepl("S005", colnames(table_bacteria_counts))] )
table_bacteria$Presence_S006 <- rowSums(table_bacteria_counts[, grepl("S006", colnames(table_bacteria_counts))] )
table_bacteria$Presence_S007 <- rowSums(table_bacteria_counts[, grepl("S007", colnames(table_bacteria_counts))] )
table_bacteria$Presence_S009 <- rowSums(table_bacteria_counts[, grepl("S009", colnames(table_bacteria_counts))] )
table_bacteria$Presence_S010 <- rowSums(table_bacteria_counts[, grepl("S010", colnames(table_bacteria_counts))] )
table_bacteria$Presence_S011 <- rowSums(table_bacteria_counts[, grepl("S011", colnames(table_bacteria_counts))] )

@
<<correlate virome abundances to 16S abundance table>>= 
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/", sep=""))
  
# Viral info
RAREFIEDREADS <- as.data.frame(t(as.data.frame(otu_table(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))))
RAREFIEDREADS$Sample.ID <- rownames(RAREFIEDREADS)

VIROME <- as.data.frame(t(read.csv(paste(Workdir,"Data_Github/ProkaryoticVirome/Rarefied/OTU_rarefied2_abundances.virome.csv", sep=""), header=T)))
rownames(VIROME) <- gsub('\\.','-',rownames(VIROME))
colnames(VIROME) <-  as.character(unlist(VIROME[1,]))
# Bacterial info
bacterial_taxa <- table_bacteria_tax %>% mutate_all(as.character())
bacterial_taxa <- bacterial_taxa[!duplicated(bacterial_taxa),]
bacterial_taxa$Family <- as.character(bacterial_taxa$Family)
bacterial_taxa$Family[bacterial_taxa$Genus == "Parabacteroides"] <- "Tannerellaceae"

# output table for GMMS correlation
EnterostageCorr <- as.data.frame(matrix(rep(taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads),8), ncol=8))
colnames(EnterostageCorr) <- Infants
rownames(EnterostageCorr) <- EnterostageCorr$S011
EnterostageCorr[,colnames(EnterostageCorr) %in% Infants] <- 0
EnterostageCorr_K <- EnterostageCorr
EnterostageCorr_K[EnterostageCorr_K == 0] <- NA

# outputtable for time point  of  first  appearance
TIME_first <- EnterostageCorr
TIME_first[TIME_first == 0] <- -1
TIME_last <- TIME_first
# outputtable for dunn  test results
D_list <- c('chi2','Z','P','P.adj','Comparison','phage','infant','N','r','r2')

# for every phage we will calculate the correlation to the  bacterial ASVs
for (phage in taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads)){
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/", phage,sep=""))

infantsofinterest <- gsub('Presence_r2_dynamics_','',colnames(MasterTable_150[rownames(MasterTable_150) == phage,grepl("Presence_r2_dynamics_",colnames(MasterTable_150))]) [MasterTable_150[rownames(MasterTable_150) == phage, grepl("Presence_r2_dynamics_",colnames(MasterTable_150))] >= DYNAMICS_TRESHOLD]) 
infantsofinterest <- infantsofinterest[!infantsofinterest %in% c("NumberOfSamples","NumberOfSamples_noS011", "NumberOfInfants", "NumberOfInfants_noS011") ]

if (length(infantsofinterest) < 1){  
}
if (length(infantsofinterest) >= 1){
for (infant in infantsofinterest){
# phage reads

VIR <- VIROME[rownames(VIROME) == phage,]
BAC <- table_bacteria[table_bacteria[,colnames(table_bacteria) == paste("Presence_",infant, sep="")] > 1 ,]
BAC <- BAC %>% mutate_all(as.character)
rownames(BAC) <- BAC$OTU
BAC$OTU <- NULL

table <- as.data.frame(t(rbind(VIR[colnames(VIR) %in% colnames(BAC)],BAC[,colnames(BAC) %in% colnames(VIR)] ))) 
table <- table[grepl(infant, rownames(table)),]
num.cols <- colnames(table)[grepl('A|NODE', colnames(table))]
table[num.cols] <- sapply(table[num.cols], as.character)
table[num.cols] <- sapply(table[num.cols], as.numeric)
## calculate correlation w bacteria

### spearman
COR <- cor(table, method = "spearman")
COR_m <- melt(COR)
COR_m <- COR_m[COR_m$Var1 == phage,]
COR_m <- COR_m[!COR_m$Var2 == phage,]

# get stats
COR_P <-  Hmisc::rcorr(as.matrix(table), type= "spearman")
COR_P_m <- melt(COR_P$P)
COR_P_m <- COR_P_m[COR_P_m$Var1 == phage,]
COR_P_m <- COR_P_m[!COR_P_m$Var2 == phage,]
colnames(COR_P_m)[3] <- "p.value"

COR_m <- merge(COR_m, COR_P_m)
COR_m$p.value.adjusted <- p.adjust(COR_m$p.value, "fdr")
#####
plot <- as.data.frame(t(rbind(
  BAC[rownames(BAC) %in% COR_m$Var2[abs(COR_m$value) > 0.25  ], colnames(BAC) %in% rownames(table)],
  VIR[,colnames(VIR) %in%  rownames(table)] ) ))

plot[,phage] <- as.numeric(as.character(plot[,phage] ))

for (c in rownames(plot)){
  plot$X.days[rownames(plot) == c] <- BabyGut16S_metadata$X.days[BabyGut16S_metadata$Sample.ID == c]
}
plot$Sample <- rownames(plot)

plot_m <- melt(plot, id.vars = c("X.days","Sample"))
plot_m$value<- as.numeric(plot_m$value)
plot_m$Correlation[plot_m$variable %in% COR_m$Var2[COR_m$value >0]] <- 'Positive'
plot_m$Correlation[plot_m$variable %in% COR_m$Var2[COR_m$value <0]] <- 'Negative'
#  rename OTUs in shorter name
plot_m$OTU_short <- NA
for (otu in unique(plot_m$variable)[-length(unique(plot_m$variable))]){
  plot_m$OTU_short[plot_m$variable == otu] <- as.character(unique(bacterial_taxa$OTU_short[bacterial_taxa$OTU == otu]))
   plot_m$OTU_short[plot_m$variable == otu] <- paste(plot_m$OTU_short[plot_m$variable == otu], round(unique(COR_m$value[COR_m$Var2 ==otu]),4) , sep=": ")

  plot_m$Genus[plot_m$variable == otu] <- as.character(unique(bacterial_taxa$Genus[bacterial_taxa$OTU == otu]))
  plot_m$Family[plot_m$variable == otu] <- as.character(unique(bacterial_taxa$Family[bacterial_taxa$OTU == otu]))
  plot_m$Phylum[plot_m$variable == otu] <- as.character(unique(bacterial_taxa$Phylum[bacterial_taxa$OTU == otu]))
  plot_m$spearman[plot_m$variable == otu] <- unique(COR_m$value[COR_m$Var2 ==otu])
}

plot_m$Phylum[plot_m$variable == phage] <- paste("Virus_", phage,sep="")
plot_m$OTU_short[is.na(plot_m$OTU_short)] <- "_PHAGE"
plot_m$Correlation[plot_m$variable == phage] <- "Positive"

#all
plot_all <- as.data.frame(t(rbind(
  BAC[, colnames(BAC) %in% rownames(table)],
  VIR[, colnames(VIR) %in%  rownames(table)] ) ))
for (c in rownames(plot_all)){
  plot_all$X.days[rownames(plot_all) == c] <- BabyGut16S_metadata$X.days[BabyGut16S_metadata$Sample.ID == c]
}
plot_all$Sample <- rownames(plot_all)

plot_all_m <- melt(plot_all, id.vars = c("X.days","Sample"))
plot_all_m$Correlation[plot_all_m$variable %in% COR_m$Var2[COR_m$value >0]] <- 'Positive'
plot_all_m$Correlation[plot_all_m$variable %in% COR_m$Var2[COR_m$value <0]] <- 'Negative'

for (t in as.character(unique(COR_m$Var2))){
  plot_m$p.value[plot_m$variable == t] <- COR_m$p.value[COR_m$Var2 == t]
  plot_m$p.value.adjusted[plot_m$variable == t] <- COR_m$p.value.adjusted[COR_m$Var2 == t]
}

write.csv(x = plot_m, file = paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/", phage,  "/Plot_BactvsVir_spearman_",phage,"_", infant,".csv",sep=""))

## plot correlation w bacteria
if (length(COR_m$Var2[abs(COR_m$value) > 0.25])  > 0){
for (otu in unique(plot_all_m$variable)[-length(unique(plot_all_m$variable))]){
  plot_all_m$OTU_short[plot_all_m$variable == otu] <- as.character(unique(bacterial_taxa$OTU_short[bacterial_taxa$OTU == otu]))
 plot_all_m$OTU_short[plot_all_m$variable == otu] <- paste( plot_all_m$OTU_short[plot_all_m$variable == otu], round(unique(COR_m$value[COR_m$Var2 ==otu]),4) , sep=": ")

  plot_all_m$Genus[plot_all_m$variable == otu] <- as.character(unique(bacterial_taxa$Genus[bacterial_taxa$OTU == otu]))
  plot_all_m$Family[plot_all_m$variable == otu] <- as.character(unique(bacterial_taxa$Family[bacterial_taxa$OTU == otu]))
  plot_all_m$Phylum[plot_all_m$variable == otu] <- as.character(unique(bacterial_taxa$Phylum[bacterial_taxa$OTU == otu]))
}
plot_all_m$Phylum[plot_all_m$variable == phage] <- paste("Virus_", phage,sep="")
plot_all_m$OTU_short[is.na(plot_all_m$OTU_short)] <- "_PHAGE"

p <- ggplot(plot_m[!plot_m$variable == phage,], aes(x=X.days, y=value, color=OTU_short))  + 
  geom_line(size=1.3)+
  theme_LB()+
  xlab('Days After Birth')+
  ylab('Relative Abundance')+
  scale_color_manual(values=distinctColorPalette(length(unique(plot_m$OTU_short)))) + 
  labs(title=paste("Infant: ",infant,"  
Phage: ",phage , sep=""))+
  facet_grid(Correlation~Phylum, scales="free")+
  theme(legend.title = element_blank(),panel.background = element_rect(fill = NA, color = "grey")) +guides(col=guide_legend(ncol=3))
plot_nolegend <- p+theme(legend.position = "none")

plot_phage <- ggplot(plot_m[plot_m$variable == phage,], aes(x=X.days, y=value, color=OTU_short))  + 
  geom_line(size=1.5)+
  theme_LB()+
  xlab('Days After Birth')+
  ylab('Relative Abundane')+
  scale_color_manual(values="red")+theme(legend.position = "none",legend.title = element_blank(),panel.background = element_rect(fill = NA, color = "grey"))


legend <- cowplot::get_legend(p)
PL <- ggarrange(plot_nolegend, ggarrange(plot_phage, legend, ncol = 2, widths = c(1.15,3)),  nrow = 2, heights = c(2,1) )

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/", phage, "/Plot_BactvsVir_Abundances_",phage,"_", infant,".pdf",sep=""), height=8, width=12) 
print(PL)
dev.off()

}

## plot correlation w Enterostages
plot_m$RarefiedReads  <- 0
for (s in unique(plot_m$Sample)){
  plot_m$Cluster[plot_m$Sample == s] <- as.character(Clusters$Cluster[Clusters$Sample.ID == s])
  plot_m$RarefiedReads[plot_m$variable == phage &plot_m$Sample == s ] <- RAREFIEDREADS[rownames(RAREFIEDREADS) == s,colnames(RAREFIEDREADS) == phage]
}

plot_phage <- ggplot(plot_m[plot_m$variable == phage,], aes(x=X.days, y=RarefiedReads))  + 
  theme_LB()+
  geom_line()+
  facet_wrap('Phylum')+
  ylab('Rarefied Reads')+
 # scale_color_manual(values="red")+
  theme(legend.title = element_blank(),panel.background = element_rect(fill = NA, color = "grey")) +   
  geom_point(aes(x=X.days, y=0, color=Cluster), size=5, alpha=0.9)+
  scale_color_manual(values= c(as.character(COLORS$Color))  )

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/", phage, "/Plot_Rarefiedreads_PhageOnly_correlationenterotype",phage,"_", infant,".pdf",sep="")) 

print(plot_phage)
dev.off()

plot_phage <- ggplot(plot_m[plot_m$variable == phage,], aes(x=Cluster, y=RarefiedReads, fill=Cluster))  + 
  theme_LB()+
  geom_boxplot(alpha = 0.8)+ geom_point()+
  ylab('Rarefied Reads')+
 # scale_color_manual(values="red")+
  theme(legend.title = element_blank(),panel.background = element_rect(fill = NA, color = "grey")) +   
  scale_fill_manual(values= as.character(COLORS$Color))  + 
  ggtitle(paste('Kruskal test p: ',kruskal.test(value~as.factor(Cluster), plot_m[plot_m$variable == phage,])$p.value, sep=""))
pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/", phage, "/Plotbox_Rarefied Reads_PhageOnly_correlationenterotype",phage,"_", infant,".pdf",sep="")) 
print(plot_phage)
dev.off()

## fill in output tables 
test <- aggregate(value~Cluster,plot_m[plot_m$variable == phage,],sum)
EnterostageCorr_K[phage,infant] <- kruskal.test(value~as.factor(Cluster), plot_m[plot_m$variable == phage,])$p.value
EnterostageCorr[phage,infant] <- test$Cluster[test$value == max(test$value)]
TIME_first[phage,infant] <- min(plot_m$X.days[plot_m$variable  == phage & plot_m$RarefiedReads >0])
TIME_last[phage,infant] <-  max(plot_m$X.days[plot_m$variable  == phage & plot_m$RarefiedReads >0])
####PhD test
D <- as.data.frame(dunn.test(plot_m$value[plot_m$variable == phage] ,as.factor(plot_m$Cluster[plot_m$variable == phage] ), method='bh'))
colnames(D) <- c('chi2','Z','P','P.adj','Comparison')
D$phage <- rep(phage, nrow(D))
D$infant <- rep(infant, nrow(D))
# calculate effect size:
e='Cluster'
freq <- as.data.frame(table(unique(plot_m[plot_m$variable == phage,c('Sample',e)])[,e]))
for (c in D$Comparison){
N1 <- freq$Freq[freq$Var1 == word(c,1)]
N2 <- freq$Freq[freq$Var1 == word(c,3)]
D$N[D$Comparison == c]  <- sum(N1,N2)
} #where N is the sum of the samples in the two groups compared
D$r <-  D$Z/sqrt(D$N)
D$r2 <- D$r^2

write.csv(D, (paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/", phage,"/Plot_Abundances_PhageOnly_correlationenterotype",phage,"_", infant,"_statistics_PosthocDunn_BH.csv", sep="")))
D_list <- rbind(D_list,D)
}
}
}

@
<<calculate which  phages are correlated to a specific GMMS = fig 1f, message=F>>=
Phages_only_S011 <- rownames(MasterTable_150[MasterTable_150$Presence_r2_S011 >0 & MasterTable_150$Presence_r2_NumberOfInfants  == 1 & rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads),]) # filter out S011 specific phages, in this infant temporal GMMS could not be assigned

EnterostageCorr_K_noS011 <-  EnterostageCorr_K[!rownames(EnterostageCorr_K) %in% c(Phages_only_S011),]
EnterostageCorr_K_noS011$Min <- apply(EnterostageCorr_K_noS011[, grepl("S0", colnames(EnterostageCorr_K_noS011))], 1, FUN=min,na.rm=TRUE)
EnterostageCorr_K_noS011$CORRELATED <- "No"
EnterostageCorr_K_noS011$CORRELATED[EnterostageCorr_K_noS011$Min < 0.05] <- "Yes"
table(EnterostageCorr_K_noS011$CORRELATED)

EnterostageCorr_K_noS011$InfantSpecific <- as.character("No")
EnterostageCorr_K_noS011$InfantSpecific_i <- as.character("No")
Infants_noS011 <- as.character( Infants[!Infants == c('S011')])

EnterostageCorr$Row.names <- rownames(EnterostageCorr)
for (phage in rownames(EnterostageCorr_K_noS011) ){
if(MasterTable_150$Presence_r2_dynamics_NumberOfInfants_noS011[rownames(MasterTable_150) == phage] == 1) {
EnterostageCorr_K_noS011$InfantSpecific[rownames(EnterostageCorr_K_noS011) == phage] <- 'Yes'
EnterostageCorr_K_noS011$InfantSpecific_i[rownames(EnterostageCorr_K_noS011) == phage] <- colnames(EnterostageCorr)[colnames(EnterostageCorr) %in% Infants_noS011][!EnterostageCorr[EnterostageCorr$Row.names == phage, colnames(EnterostageCorr) %in% Infants_noS011] ==  0]

} 

  
}

#phages not within treshold dynamics
phages_notincluded <- rownames(MasterTable_150[rownames(MasterTable_150) %in%  rownames(EnterostageCorr_K_noS011) & MasterTable_150$Presence_r2_dynamics_NumberOfInfants_noS011 == 0 ,])
EnterostageCorr_K_noS011 <-  EnterostageCorr_K_noS011[!rownames(EnterostageCorr_K_noS011) %in% phages_notincluded,]

EnterostageCorr_K_noS011$CAT <- ''
EnterostageCorr_K_noS011$CAT[EnterostageCorr_K_noS011$InfantSpecific == "No"] <- 'NIS' # 58/278
EnterostageCorr_K_noS011$CAT[EnterostageCorr_K_noS011$InfantSpecific == "Yes"] <- 'IS' # 220/278
## 220 infant  specific
EnterostageCorr_K_noS011$GMMS  <- 0
 EnterostageCorr_K_noS011$ExclusivePresence <- 'No'
 EnterostageCorr_K_noS011$KW_phD <- 'No'
 EnterostageCorr_K_noS011$ExclusiveAbsence <- 'No'
 EnterostageCorr_K_noS011$KW_phD_Absence <- 'No'
for (GMMS_phage in  rownames(EnterostageCorr_K_noS011[EnterostageCorr_K_noS011$InfantSpecific == "Yes" ,])){
 
  infant <- EnterostageCorr_K_noS011$InfantSpecific_i[rownames(EnterostageCorr_K_noS011) == GMMS_phage]
  positivesamples <- rownames(RAREFIEDREADS[grepl(infant, rownames(RAREFIEDREADS)),])[RAREFIEDREADS[grepl(infant, rownames(RAREFIEDREADS)),colnames(RAREFIEDREADS) == GMMS_phage] >0]
  
 clusters <- as.character(Clusters$Cluster[Clusters$Sample.ID %in% positivesamples])

#test CRIT 1: exclusive for one GMMS
if (length(unique(clusters))  == 1){
  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- unique(clusters)
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'IS_exclusivepresence_GMMS'
  EnterostageCorr_K_noS011$ExclusivePresence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'
}
#test CRIT 2: KW + phDunn significant + clear significant dominance for  one GMM
if(EnterostageCorr_K_noS011$CORRELATED[rownames(EnterostageCorr_K_noS011) == GMMS_phage] == "Yes"){
 dunntest <- D_list[D_list$phage == GMMS_phage &  D_list$infant == infant,]
 dunntest$P.adj <- as.numeric(as.character(dunntest$P.adj)) 
 #A_specific:  A>B en A>C
conditions_A <- all(
dunntest$Z[dunntest$Comparison == "A - B"] >0 & # A>B
dunntest$P.adj[dunntest$Comparison == "A - B"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "A - C"] > 0 &# A>C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05)# A>C sign
#B_specific:  A<B en B>C
conditions_B <- all(
dunntest$Z[dunntest$Comparison == "A - B"] <0 &# A>B
dunntest$P.adj[dunntest$Comparison == "A - B"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "B - C"] > 0 &# B>C
dunntest$P.adj[dunntest$Comparison == "B - C"] <0.05) # B>C sign
#C_specific:  A<C en B<C
conditions_C <- all(
dunntest$Z[dunntest$Comparison == "A - C"] <0 &# A<C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05& # A<C sign
dunntest$Z[dunntest$Comparison == "B - C"] < 0&# B<C
dunntest$P.adj[dunntest$Comparison == "B - C"] <0.05) # B<C sign
if(conditions_A == T){
 EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage&  EnterostageCorr_K_noS011$CAT == "IS"] <- "A"
 
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- 'IS_KWS'
  EnterostageCorr_K_noS011$KW_phD[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'
  }
if(conditions_B == T){
 EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage&  EnterostageCorr_K_noS011$CAT == "IS"] <- "B"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- 'IS_KWS'
  EnterostageCorr_K_noS011$KW_phD[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'


 }
if(conditions_C == T){
 EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage&  EnterostageCorr_K_noS011$CAT == "IS"] <- "C"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- 'IS_KWS'
    EnterostageCorr_K_noS011$KW_phD[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'


 }
} 
#test CRIT 3: exclusive absence in one GMM (A or C)
if(('A' %in% clusters) & ('B' %in% clusters) & !('C' %in% clusters)){
  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- "AB"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- 'IS_exclusiveabsence_GMMS'
  EnterostageCorr_K_noS011$ExclusiveAbsence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'

}
if(!('A' %in% clusters) & ('B' %in% clusters) & ('C' %in% clusters)){
    EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- "BC"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- 'IS_exclusiveabsence_GMMS'
  EnterostageCorr_K_noS011$ExclusiveAbsence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'

}
#test CRIT 4: KW + phDunn significant + clear significant absence in  one GMM
if(EnterostageCorr_K_noS011$CORRELATED[rownames(EnterostageCorr_K_noS011) == GMMS_phage] == "Yes"){
 dunntest <- D_list[D_list$phage == GMMS_phage &  D_list$infant == infant,]
 dunntest$P.adj <- as.numeric(as.character(dunntest$P.adj)) 
#Absent in A, so BC
conditions_BC <- all(
dunntest$Z[dunntest$Comparison == "A - B"] <0 & # A<B
dunntest$P.adj[dunntest$Comparison == "A - B"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "A - C"] < 0 &# A<C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05)# A>C sign
#Absent in C, so AB
conditions_AB <- all(
dunntest$Z[dunntest$Comparison == "B - C"] >0 & # B>C
dunntest$P.adj[dunntest$Comparison == "B - C"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "A - C"] > 0 &# A>C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05)# A>C sign
if(conditions_AB == T){
 EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- "AB"
 EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- 'IS_KWS_absence'
   EnterostageCorr_K_noS011$KW_phD_Absence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'

  }
if(conditions_BC == T){
 EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- "BC"
 EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "IS"] <- 'IS_KWS_absence'
   EnterostageCorr_K_noS011$KW_phD_Absence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'


  }
 }
 } 

EnterostageCorr_K_noS011$GMMS[EnterostageCorr_K_noS011$CAT  == "IS"] <- "NOTTIMERELATED" 
EnterostageCorr_K_noS011$CAT[EnterostageCorr_K_noS011$CAT  == "IS"] <- "IS_NOTTIMERELATED"  # 87/220

 # 58 not infant  specific
RAREFIEDREADS <- as.data.frame(RAREFIEDREADS)
RAREFIEDREADS$Sample.ID <- rownames(RAREFIEDREADS)
Reads_Cluster  <- merge(RAREFIEDREADS, Clusters, by="Sample.ID") 
Reads_Cluster <- Reads_Cluster[!grepl('S011', Reads_Cluster$Sample.ID),]

for (GMMS_phage in  rownames(EnterostageCorr_K_noS011[EnterostageCorr_K_noS011$InfantSpecific == "No" ,])){ 

  infants <-  colnames(EnterostageCorr)[colnames(EnterostageCorr) %in% Infants_noS011][!EnterostageCorr[EnterostageCorr$Row.names == GMMS_phage, colnames(EnterostageCorr) %in% Infants_noS011] ==  0]
  
  EnterostageCorr_K_noS011$NumberOfInfants[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- length(infants)
   
   positivesamples <- rownames(RAREFIEDREADS[grepl(paste(infants,collapse='|'), rownames(RAREFIEDREADS)),])[RAREFIEDREADS[grepl(paste(infants,collapse='|'), rownames(RAREFIEDREADS)),colnames(RAREFIEDREADS) == GMMS_phage] >0]

 clusters <- as.character(Clusters$Cluster[Clusters$Sample.ID %in% positivesamples])

#test CRIT 1: exclusive for one GMMS
if (length(unique(clusters))  == 1){
  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- unique(clusters)
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'NIS_exclusivepresence_GMMS'
  EnterostageCorr_K_noS011$ExclusivePresence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'
} 
 
#test CRIT 2: KW + phDunn significant + clear significant dominance for  one GMM
 infants_KW <- c('Phage','infant','KW','Conditionsmet')
 for (infant in infants){
    Reads_Cluster_infant <- Reads_Cluster[grepl(paste(infant, collapse='|'), Reads_Cluster$Sample.ID),]

   if( kruskal.test(get(GMMS_phage)~as.factor(Cluster), Reads_Cluster_infant[,colnames(Reads_Cluster_infant) %in% c(GMMS_phage,"Cluster"),])$p.value <  0.05){
  #  run KW over all samples of all infants
dunntest <- as.data.frame(dunn.test(Reads_Cluster_infant[,colnames(Reads_Cluster_infant) %in% c(GMMS_phage)] ,as.factor(Reads_Cluster_infant[,colnames(Reads_Cluster_infant) %in% c("Cluster")]), method='bh'))
colnames(dunntest) <- c('chi2','Z','P','P.adj','Comparison')
dunntest$phage <- rep(phage, nrow(dunntest))

dunntest$P.adj <- as.numeric(as.character(dunntest$P.adj)) 
 #A_specific:  A>B en A>C
conditions_A <- all(
dunntest$Z[dunntest$Comparison == "A - B"] >0 & # A>B
dunntest$P.adj[dunntest$Comparison == "A - B"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "A - C"] > 0 &# A>C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05)# A>C sign
#B_specific:  A<B en B>C
conditions_B <- all(
dunntest$Z[dunntest$Comparison == "A - B"] <0 &# A>B
dunntest$P.adj[dunntest$Comparison == "A - B"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "B - C"] > 0 &# B>C
dunntest$P.adj[dunntest$Comparison == "B - C"] <0.05) # B>C sign
#C_specific:  A<C en B<C
conditions_C <- all(
dunntest$Z[dunntest$Comparison == "A - C"] <0 &# A<C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05& # A<C sign
dunntest$Z[dunntest$Comparison == "B - C"] < 0&# B<C
dunntest$P.adj[dunntest$Comparison == "B - C"] <0.05) # B<C sign
#Absent in A, so BC
conditions_BC <- all(
dunntest$Z[dunntest$Comparison == "A - B"] <0 & # A<B
dunntest$P.adj[dunntest$Comparison == "A - B"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "A - C"] < 0 &# A<C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05)# A>C sign
#Absent in C, so AB
conditions_AB <- all(
dunntest$Z[dunntest$Comparison == "B - C"] >0 & # B>C
dunntest$P.adj[dunntest$Comparison == "B - C"] <0.05 &# A>B sign
dunntest$Z[dunntest$Comparison == "A - C"] > 0 &# A>C
dunntest$P.adj[dunntest$Comparison == "A - C"] <0.05)# A>C sign

if(conditions_A == T){
infants_KW <- rbind(infants_KW, c(GMMS_phage,infant,'KW_sign',"A"))
 }
if(conditions_B == T){
infants_KW <- rbind(infants_KW, c(GMMS_phage,infant,'KW_sign',"B"))


 }
if(conditions_C == T){
infants_KW <- rbind(infants_KW, c(GMMS_phage,infant,'KW_sign',"C"))


}
if(conditions_AB == T){
infants_KW <- rbind(infants_KW, c(GMMS_phage,infant,'KW_sign',"AB"))

  }
if(conditions_BC == T){
 infants_KW <- rbind(infants_KW, c(GMMS_phage,infant,'KW_sign',"BC"))


  }
if(conditions_A == F & conditions_B==F & conditions_C==F & conditions_AB==F & conditions_BC ==F){
   infants_KW <- rbind(infants_KW, c(GMMS_phage,infant,'KW_sign',"NOT_GMMSRELATED"))

}

   } 
    if( kruskal.test(get(GMMS_phage)~as.factor(Cluster), Reads_Cluster_infant[,colnames(Reads_Cluster_infant) %in% c(GMMS_phage,"Cluster"),])$p.value >=  0.05){
      infants_KW <- rbind(infants_KW, c(GMMS_phage,infant,'NS',0))

    }
 }
infants_KW  <- as.data.frame(infants_KW)
colnames(infants_KW) <-  c('Phage','infant','KW','Conditionsmet')
infants_KW  <- infants_KW[-1,]
if(length(unique(infants_KW$Conditionsmet)) == 1 &! unique(infants_KW$Conditionsmet) == 0) {
  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- as.character(unique(infants_KW$Conditionsmet))
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- 'NIS_KW_allsame_GMMS'
  EnterostageCorr_K_noS011$KW_phD[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'
 
  
}
if(any(grepl('NOT_GMMSRELATED',unique(infants_KW$Conditionsmet)))| (all(c("A","B","C") %in% clusters) & length(unique(infants_KW$Conditionsmet)) > 1) )  {
  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- "NOT_GMMSRELATED"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- 'NIS_KW_NOT_GMMSRELATED'

  
}

 #test CRIT 3: exclusive absence in one GMM A or C
if(('A' %in% clusters) & ('B' %in% clusters) & !('C' %in% clusters)){
  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- "AB"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- 'NIS_exclusiveabsence_GMMS'
  EnterostageCorr_K_noS011$ExclusiveAbsence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'

}
if(!('A' %in% clusters) & ('B' %in% clusters) & ('C' %in% clusters)){
    EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- "BC"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- 'NIS_exclusiveabsence_GMMS'
  EnterostageCorr_K_noS011$ExclusiveAbsence[rownames(EnterostageCorr_K_noS011) == GMMS_phage] <- 'Yes'

}
 # test CRIT 4 (included in 2)
if(unique(infants_KW$Conditionsmet) ==0 & (all(c("A","B","C") %in% clusters)))  {
  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- "NOT_GMMSRELATED"
  EnterostageCorr_K_noS011$CAT[rownames(EnterostageCorr_K_noS011) == GMMS_phage &  EnterostageCorr_K_noS011$CAT == "NIS"] <- 'NIS_KW_allNS_NOTGMMSRELATED'

  
}

}

# rest is  not time or GMMS  related
EnterostageCorr_K_noS011$GMMS[EnterostageCorr_K_noS011$CAT  == "NIS"] <- "NOTTIMERELATED"
EnterostageCorr_K_noS011$CAT[EnterostageCorr_K_noS011$CAT  == "NIS"] <- "NIS_NOTTIMERELATED"


table(EnterostageCorr_K_noS011$GMMS )
table(EnterostageCorr_K_noS011$CAT[grepl('NIS',EnterostageCorr_K_noS011$CAT)] )
EnterostageCorr_K_noS011$GMMS[EnterostageCorr_K_noS011$GMMS == "NOTTIMERELATED"]  <- "NOT_GMMSRELATED"
# plot some specific ones as an example
for (GMM in c('A','B','C') ){
print(GMM)
print(table(EnterostageCorr_K_noS011$InfantSpecific_i[EnterostageCorr_K_noS011$InfantSpecific == "Yes" & EnterostageCorr_K_noS011$GMMS == GMM ]))
for (i in Infants[!Infants ==  'S011']){
  
Sub <- EnterostageCorr_K_noS011[EnterostageCorr_K_noS011$InfantSpecific == "Yes" & EnterostageCorr_K_noS011$GMMS == GMM & EnterostageCorr_K_noS011$InfantSpecific_i  == i ,] 

toplot <- melt(id.vars = c('Cluster','Sample.ID'), Reads_Cluster[grepl(i,Reads_Cluster$Sample.ID),colnames(Reads_Cluster) %in%  c('Cluster','Sample.ID', rownames(Sub) ) ])
TOP_3 <- aggregate(value~variable,toplot, sum)$variable[1:3]


for (sam in unique(toplot$Sample.ID)){
  toplot$X.days[toplot$Sample.ID == sam] <-  meta.virome$X.days[meta.virome$Sample.ID == sam]
}

 pl <-   ggplot(toplot , aes(x=X.days, y=value)) +
  theme_LB()+
  geom_line()+
  facet_wrap('variable', scales="free")+
  ylab('Rarefied Reads')+
 # scale_color_manual(values="red")+
  theme(legend.title = element_blank(),panel.background = element_rect(fill = NA, color = "grey")) +   
  geom_point(aes(x=X.days, y=0, color=Cluster), size=5, alpha=0.9)+
  scale_color_manual(values= c(as.character(COLORS$Color))  )+
    ggtitle(paste("Rarefied Reads of BIG phages specific to GMMS ", GMM,', Specific  to infant  ',i, sep=""))
 
 pl_top3 <-   ggplot(toplot[toplot$variable %in% TOP_3,] , aes(x=X.days, y=value)) +
  theme_LB()+
  geom_line()+
  facet_wrap('variable', nrow=1)+
  ylab('Rarefied Reads')+
     xlab('Days After Birth')+
 # scale_color_manual(values="red")+
  theme(legend.title = element_blank(),panel.background = element_rect(fill = NA, color = "grey")) +   
  geom_point(aes(x=X.days, y=0, color=Cluster), size=5, alpha=0.9)+
  scale_color_manual(values= c(as.character(COLORS$Color))  )+
    ggtitle(paste("Rarefied Reads of top 3 most abundant BIG phages specific to GMMS ", GMM,', 
   Specific  to infant  ',i, sep=""))
 pl_top3_ <-   ggplot(toplot[toplot$variable %in% TOP_3,] , aes(x=X.days, y=value)) +
  theme_LB()+
  geom_line(aes(color=variable))+
  scale_color_manual(values=c("darkblue","orange","green"))+
  ylab('Rarefied Reads')+
  xlab('Days After Birth')+
  theme(legend.title = element_blank(),panel.background = element_rect(fill = NA, color = "grey")) +   
    ggtitle(paste("Rarefied Reads of top 3 most abundant BIG phages specific to GMMS ", GMM,', 
   Specific  to infant  ',i, sep=""))+
   theme(legend.position = 'bottom')
 
    
    
  pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/Lineplot_",i,'_specificBIGphages_GMMS_',GMM,".pdf",sep=""))
  plot(pl)
  dev.off()
    pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"),"/Phage_16S_correlation/Lineplot_TOP3_",i,'_specificBIGphages_GMMS_',GMM,".pdf",sep=""), width=8, height=3)
  plot(pl_top3)
  dev.off()    
  pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_16S_correlation/Lineplot_TOP3_",i,'_specificBIGphages__GMMS_',GMM,".pdf",sep=""), width=3, height=3)
  plot(pl_top3_)
  dev.off()
}
}

#########
MasterTable_150$GMMS <- 0
TIME_first[TIME_first == -1] <- NA
TIME_last[TIME_last == -1] <- NA
MasterTable_150$Time_first <- NA
for (r in rownames(EnterostageCorr_K_noS011)){
MasterTable_150$GMMS[rownames(MasterTable_150) == r]  <-  EnterostageCorr_K_noS011$GMMS[rownames(EnterostageCorr_K_noS011)  == r] }
for (r in rownames(EnterostageCorr_K)){

MasterTable_150$Time_first[rownames(MasterTable_150) == r]  <-  min(TIME_first[rownames(TIME_first)  == r,], na.rm = TRUE)
MasterTable_150$Time_last[rownames(MasterTable_150) == r]  <-  max(TIME_last[rownames(TIME_last)  == r,], na.rm = TRUE)
RAREFIEDREADS_ <- merge(RAREFIEDREADS, meta.virome[,colnames(meta.virome) %in% c('Sample.ID','X.days')], by="Sample.ID")
if( min(TIME_first[rownames(TIME_first)  == r,], na.rm = TRUE) == Inf) {

MasterTable_150$Time_first[rownames(MasterTable_150) == r]  <- min(RAREFIEDREADS_$X.days[ RAREFIEDREADS_[,r] >0]  , na.rm = TRUE)
MasterTable_150$Time_last[rownames(MasterTable_150) == r]  <-  max(RAREFIEDREADS_$X.days[ RAREFIEDREADS_[,r] >0]  , na.rm = TRUE)
  
}

}
@
<<Define agebins, message=F>>=
## AGE bins (weeks)
MasterTable_150$weeks <- NA
MasterTable_150$weeks[MasterTable_150$Time_first < 7] <- 'w1' 
MasterTable_150$weeks[MasterTable_150$Time_first < 14 &is.na(MasterTable_150$weeks)] <- 'w2' 
MasterTable_150$weeks[MasterTable_150$Time_first < 21 &is.na(MasterTable_150$weeks)] <- 'w3' 
MasterTable_150$weeks[MasterTable_150$Time_first < 28 &is.na(MasterTable_150$weeks)] <- 'w4' 
MasterTable_150$weeks[MasterTable_150$Time_first < 60 &is.na(MasterTable_150$weeks)] <- 'm2' 
MasterTable_150$weeks[MasterTable_150$Time_first < 90 &is.na(MasterTable_150$weeks)] <- 'm3' 
MasterTable_150$weeks[MasterTable_150$Time_first < 120 &is.na(MasterTable_150$weeks)] <- 'm4' 
MasterTable_150$weeks[MasterTable_150$Time_first < 150 &is.na(MasterTable_150$weeks)] <- 'm5' 
MasterTable_150$weeks[MasterTable_150$Time_first < 180 &is.na(MasterTable_150$weeks)] <- 'm6' 
MasterTable_150$weeks[MasterTable_150$Time_first < 210 &is.na(MasterTable_150$weeks)] <- 'm7' 
MasterTable_150$weeks[MasterTable_150$Time_first < 240 &is.na(MasterTable_150$weeks)] <- 'm8' 
MasterTable_150$weeks[MasterTable_150$Time_first < 270 &is.na(MasterTable_150$weeks)] <- 'm9' 
MasterTable_150$weeks[MasterTable_150$Time_first < 300 &is.na(MasterTable_150$weeks)] <- 'm10' 
MasterTable_150$weeks[MasterTable_150$Time_first < 330 &is.na(MasterTable_150$weeks)] <- 'm11' 
MasterTable_150$weeks[MasterTable_150$Time_first >= 330 &is.na(MasterTable_150$weeks)] <- 'm12' 

MasterTable_150$weeks <- factor(MasterTable_150$weeks, levels=c('w1','w2','w3','w4','m2','m3','m4','m5','m6','m7','m8','m9','m10','m11','m12'))

## AGE bins (months)
MasterTable_150$months <- NA
MasterTable_150$months[MasterTable_150$Time_first < 30] <- 'm1' 
MasterTable_150$months[MasterTable_150$Time_first < 60 &is.na(MasterTable_150$months)] <- 'm2' 
MasterTable_150$months[MasterTable_150$Time_first < 90 &is.na(MasterTable_150$months)] <- 'm3' 
MasterTable_150$months[MasterTable_150$Time_first < 120 &is.na(MasterTable_150$months)] <- 'm4' 
MasterTable_150$months[MasterTable_150$Time_first < 150 &is.na(MasterTable_150$months)] <- 'm5' 
MasterTable_150$months[MasterTable_150$Time_first < 180 &is.na(MasterTable_150$months)] <- 'm6' 
MasterTable_150$months[MasterTable_150$Time_first < 210 &is.na(MasterTable_150$months)] <- 'm7' 
MasterTable_150$months[MasterTable_150$Time_first < 240 &is.na(MasterTable_150$months)] <- 'm8' 
MasterTable_150$months[MasterTable_150$Time_first < 270 &is.na(MasterTable_150$months)] <- 'm9' 
MasterTable_150$months[MasterTable_150$Time_first < 300 &is.na(MasterTable_150$months)] <- 'm10' 
MasterTable_150$months[MasterTable_150$Time_first < 330 &is.na(MasterTable_150$months)] <- 'm11' 
MasterTable_150$months[MasterTable_150$Time_first >= 330 &is.na(MasterTable_150$months)] <- 'm12' 

MasterTable_150$months <- factor(MasterTable_150$months, levels=c('m1','m2','m3','m4','m5','m6','m7','m8','m9','m10','m11','m12'))
## AGE bins (twomonths)
MasterTable_150$twomonths <- NA
MasterTable_150$twomonths[MasterTable_150$Time_first < 60] <- 'm1-2' 
MasterTable_150$twomonths[MasterTable_150$Time_first < 120 &is.na(MasterTable_150$twomonths)] <- 'm3-4' 
MasterTable_150$twomonths[MasterTable_150$Time_first < 180 &is.na(MasterTable_150$twomonths)] <- 'm5-6' 
MasterTable_150$twomonths[MasterTable_150$Time_first < 240 &is.na(MasterTable_150$twomonths)] <- 'm7-8' 
MasterTable_150$twomonths[MasterTable_150$Time_first < 300 &is.na(MasterTable_150$twomonths)] <- 'm9-10' 
MasterTable_150$twomonths[MasterTable_150$Time_first >= 300 &is.na(MasterTable_150$twomonths)] <- 'm11-12' 
MasterTable_150$twomonths <- factor(MasterTable_150$twomonths, levels=c('m1-2','m3-4','m5-6','m7-8','m9-10','m11-12'))
## AGE bins (threemonths)
MasterTable_150$threemonths <- NA
MasterTable_150$threemonths[MasterTable_150$Time_first < 90] <- 'm1-3' 
MasterTable_150$threemonths[MasterTable_150$Time_first < 180 &is.na(MasterTable_150$threemonths)] <- 'm4-6' 
MasterTable_150$threemonths[MasterTable_150$Time_first < 270 &is.na(MasterTable_150$threemonths)] <- 'm7-9' 
MasterTable_150$threemonths[MasterTable_150$Time_first >= 270 &is.na(MasterTable_150$threemonths)] <- 'm10-12' 
MasterTable_150$threemonths <- factor(MasterTable_150$threemonths, levels=c('m1-3','m4-6','m7-9','m10-12'))
@
\subsection*{Host Prediction and confirmation}
<<Host Prediction>>=
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/", sep=""))

Host <- MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('X|BLASTN|DIAMOND|crispr|tRNA|Presence_r2_',  colnames(MasterTable_150))]
Host <- Host %>% mutate_all(as.character)
rownames(Host) <- Host$X 
Host$Presence_r2_NumberOfSamples_noS011 <- as.numeric(Host$Presence_r2_NumberOfSamples_noS011 )
Host$Presence_r2_NumberOfInfants_noS011 <- as.numeric(Host$Presence_r2_NumberOfInfants_noS011 )
Host$Presence_r2_NumberOfInfants <- as.numeric(Host$Presence_r2_NumberOfInfants )
Host$Presence_r2_NumberOfSamples <- as.numeric(Host$Presence_r2_NumberOfSamples )
Host$Presence_r2_dynamics_S003 <- as.numeric(Host$Presence_r2_dynamics_S003 )
Host$Presence_r2_dynamics_S004 <- as.numeric(Host$Presence_r2_dynamics_S004 )
Host$Presence_r2_dynamics_S005 <- as.numeric(Host$Presence_r2_dynamics_S005 )
Host$Presence_r2_dynamics_S006 <- as.numeric(Host$Presence_r2_dynamics_S006 )
Host$Presence_r2_dynamics_S007 <- as.numeric(Host$Presence_r2_dynamics_S007 )
Host$Presence_r2_dynamics_S009 <- as.numeric(Host$Presence_r2_dynamics_S009 )
Host$Presence_r2_dynamics_S010 <- as.numeric(Host$Presence_r2_dynamics_S010 )
Host$Presence_r2_dynamics_S011 <- as.numeric(Host$Presence_r2_dynamics_S011 )

Host$InfantSpecific <- "No"
Host$InfantSpecific_i <- NA
for  (r  in rownames(Host)){
if(MasterTable_150$Presence_r2_NumberOfInfants[rownames(MasterTable_150) == r] == 1) {
Host$InfantSpecific[rownames(Host) == r] <- 'Yes'

Host$InfantSpecific_i[rownames(Host) == r] <- gsub('Presence_r2_dynamics_','',colnames(MasterTable_150)[grepl('r2_dynamics_S', colnames(MasterTable_150))] [MasterTable_150[rownames(MasterTable_150) == r,grepl('r2_dynamics_S', colnames(MasterTable_150))] > 0])
} 
}

#### host prediction
######################
#### 1) phage name indicates host: 
##########
##1.1 phage name itself; 1.2 bacterial name
Host$HostCriterium_1_1_fam <- NA
Host$HostCriterium_1_1_gen <- NA

Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Enterococcus',Host$BLASTN_completeDB_species)] <- "Enterococcus"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Staphylococcus',Host$BLASTN_completeDB_species)] <- "Staphylococcus"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Lactococcus',Host$BLASTN_completeDB_species)] <- "Lactococcus"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Lactococcus',Host$DIAMOND_completeDB_species)] <- "Lactococcus"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Streptococcus',Host$BLASTN_completeDB_species)] <- "Streptococcus"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Streptococcus',Host$DIAMOND_completeDB_species)] <- "Streptococcus"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Faecalibacterium',Host$BLASTN_completeDB_species)] <- "Faecalibacterium"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Shigella',Host$BLASTN_completeDB_species)] <- "Shigella"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Bacteroides',Host$BLASTN_completeDB_species)] <- "Bacteroides"
Host$HostCriterium_1_1_gen[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Escherichia',Host$BLASTN_completeDB_species)] <- "Escherichia"


Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Enterococcus',Host$BLASTN_completeDB_species)] <- "Enterococcaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Staphylococcus',Host$BLASTN_completeDB_species)] <- "Staphylococcaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Lactococcus',Host$BLASTN_completeDB_species)] <- "Streptococcaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Lactococcus',Host$DIAMOND_completeDB_species)] <- "Streptococcaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Streptococcus',Host$BLASTN_completeDB_species)] <- "Streptococcaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Streptococcus',Host$DIAMOND_completeDB_species)] <- "Streptococcaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Faecalibacterium',Host$BLASTN_completeDB_species)] <- "Ruminococcaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Shigella',Host$BLASTN_completeDB_species)] <- "Enterobacteriaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Bacteroides',Host$BLASTN_completeDB_species)] <- "Bacteroidaceae"
Host$HostCriterium_1_1_fam[Host$BLASTN_completeDB_superkingdom == "Viruses" & grepl('Escherichia',Host$BLASTN_completeDB_species)] <- "Enterobacteriaceae"

##1.1 phage name itself; 1.2 bacterial name
Host$HostCriterium_1_2_fam <- NA
Host$HostCriterium_1_2_gen <- NA

Host$HostCriterium_1_2_gen[Host$BLASTN_completeDB_superkingdom == "Bacteria" & Host$BLASTN_completeDB_genus ==  Host$DIAMOND_completeDB_genus & !Host$DIAMOND_completeDB_genus  == 0] <- as.character(Host$DIAMOND_completeDB_genus[Host$BLASTN_completeDB_superkingdom == "Bacteria" & Host$BLASTN_completeDB_genus ==  Host$DIAMOND_completeDB_genus & !Host$DIAMOND_completeDB_genus  == 0] )
Host$HostCriterium_1_2_fam[Host$BLASTN_completeDB_superkingdom == "Bacteria" & Host$BLASTN_completeDB_genus ==  Host$DIAMOND_completeDB_genus & !Host$DIAMOND_completeDB_genus  == 0] <- as.character(Host$DIAMOND_completeDB_family[Host$BLASTN_completeDB_superkingdom == "Bacteria" & Host$BLASTN_completeDB_genus ==  Host$DIAMOND_completeDB_genus & !Host$DIAMOND_completeDB_genus  == 0] )


Host$HostCriterium_1_2_gen[Host$BLASTN_completeDB_superkingdom == "Bacteria" & !Host$BLASTN_completeDB_genus  == 0 &is.na( Host$HostCriterium_1_2_gen)] <- as.character(Host$BLASTN_completeDB_genus[Host$BLASTN_completeDB_superkingdom == "Bacteria" & !Host$BLASTN_completeDB_genus  == 0&is.na( Host$HostCriterium_1_2_gen)])

Host$HostCriterium_1_2_fam[Host$BLASTN_completeDB_superkingdom == "Bacteria" & !Host$BLASTN_completeDB_genus  == 0 &is.na( Host$HostCriterium_1_2_fam)] <- as.character(Host$BLASTN_completeDB_family[Host$BLASTN_completeDB_superkingdom == "Bacteria" & !Host$BLASTN_completeDB_genus  == 0&is.na( Host$HostCriterium_1_2_fam)])

Host$HostCriterium_1_2_fam[Host$BLASTN_completeDB_superkingdom == "Bacteria" & !Host$BLASTN_completeDB_family  == 0 &is.na( Host$HostCriterium_1_2_fam)] <- as.character(Host$BLASTN_completeDB_family[Host$BLASTN_completeDB_superkingdom == "Bacteria" & !Host$BLASTN_completeDB_family  == 0&is.na( Host$HostCriterium_1_2_fam)] )
 
Host$HostCriterium_1_2_gen[Host$BLASTN_completeDB_superkingdom == "Bacteria" & !Host$BLASTN_completeDB_family  == 0 &is.na( Host$HostCriterium_1_2_gen)] <- 'no genus'
##########
#### 2) crispr hits:
##########
Host$HostCriterium_2_gen <- NA
Host$HostCriterium_2_fam <- NA
Host$HostCriterium_2_order <- NA

Host$HostCriterium_2_gen[!Host$crispr_host_genus %in% c(0,'') & !is.na(Host$crispr_host_genus)] <- as.character(Host$crispr_host_genus[!Host$crispr_host_genus %in% c(0,'') & !is.na(Host$crispr_host_genus)])
Host$HostCriterium_2_fam[!Host$crispr_host_genus %in% c(0,'') & !is.na(Host$crispr_host_genus)] <- as.character(Host$crispr_host_family[!Host$crispr_host_genus %in% c(0,'') & !is.na(Host$crispr_host_genus)])

Host$HostCriterium_2_gen[is.na(Host$HostCriterium_2_gen) & !Host$crispr_host_family %in% c(0,'') ] <- "no genus"
Host$HostCriterium_2_fam[is.na(Host$HostCriterium_2_fam) & !Host$crispr_host_family %in% c(0,'') ] <- as.character(Host$crispr_host_family[is.na(Host$HostCriterium_2_fam) & !Host$crispr_host_family %in% c(0,'') ])

Host$HostCriterium_2_gen[is.na(Host$HostCriterium_2_gen) & !Host$crispr_host_order %in% c(0,'') ] <- "no genus"
Host$HostCriterium_2_fam[is.na(Host$HostCriterium_2_fam) & !Host$crispr_host_order %in% c(0,'') ] <- "no family"
Host$HostCriterium_2_order[is.na(Host$HostCriterium_2_fam) & !Host$crispr_host_order %in% c(0,'') ] <- as.character(Host$crispr_host_order[is.na(Host$HostCriterium_2_fam) & !Host$crispr_host_order %in% c(0,'') ])

##########
#### 3) trna hit
##########
Host$HostCriterium_3_gen <- NA
Host$HostCriterium_3_fam <- NA
Host$HostCriterium_3_order <- NA

Host$HostCriterium_3_gen[!Host$tRNA_host_genus %in% c(0,'',NA) & !is.na(Host$tRNA_host_genus)] <- as.character(Host$tRNA_host_genus[!Host$tRNA_host_genus %in% c(0,'',NA) & !is.na(Host$tRNA_host_genus)])
Host$HostCriterium_3_fam[!Host$tRNA_host_genus %in% c(0,'',NA) & !is.na(Host$tRNA_host_genus)] <- as.character(Host$tRNA_host_family[!Host$tRNA_host_genus %in% c(0,'',NA) & !is.na(Host$tRNA_host_genus)])

Host$HostCriterium_3_gen[is.na(Host$HostCriterium_3_gen) & !Host$tRNA_host_family %in% c(0,'',NA) ] <- "no genus"
Host$HostCriterium_3_fam[is.na(Host$HostCriterium_3_fam) & !Host$tRNA_host_family %in% c(0,'',NA) ] <- as.character(Host$tRNA_host_family[is.na(Host$HostCriterium_3_fam) & !Host$tRNA_host_family %in% c(0,'',NA) ])

Host$HostCriterium_3_order[is.na(Host$HostCriterium_3_order) & !Host$tRNA_host_order %in% c(0,'',NA) ] <- as.character(Host$tRNA_host_order[is.na(Host$HostCriterium_3_order) & !Host$tRNA_host_order %in% c(0,'',NA) ])
Host$HostCriterium_3_gen[is.na(Host$HostCriterium_3_order) & !Host$tRNA_host_order %in% c(0,'',NA) ] <- "no genus"
  Host$HostCriterium_3_fam[is.na(Host$HostCriterium_3_order) & !Host$tRNA_host_order %in% c(0,'',NA) ] <- "no family"
#########
#### HOST
####################
Host$HostCriterium_1_1_gen[is.na(Host$HostCriterium_1_1_gen)] <- 0
Host$HostCriterium_1_1_fam[is.na(Host$HostCriterium_1_1_fam)] <- 0
Host$HostCriterium_1_2_gen[is.na(Host$HostCriterium_1_2_gen)] <- 0
Host$HostCriterium_1_2_fam[is.na(Host$HostCriterium_1_2_fam)] <- 0
Host$HostCriterium_2_gen[is.na(Host$HostCriterium_2_gen)] <- 0
Host$HostCriterium_2_fam[is.na(Host$HostCriterium_2_fam)] <- 0
Host$HostCriterium_3_gen[is.na(Host$HostCriterium_3_gen)] <- 0
Host$HostCriterium_3_fam[is.na(Host$HostCriterium_3_fam)] <- 0

Host$FinalCal_gen <- NA
Host$FinalCal_fam <- NA

# categories shared up to genus level:
# 2=1_1|1_2
Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_2_gen == Host$HostCriterium_1_1_gen)] <-   Host$HostCriterium_2_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_2_gen == Host$HostCriterium_1_1_gen)]
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_2_gen == Host$HostCriterium_1_1_gen)] <-   Host$HostCriterium_2_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_2_gen == Host$HostCriterium_1_1_gen)]
# 2=3
Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_3_gen)] <-   Host$HostCriterium_2_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_3_gen)]
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_3_gen)] <-   Host$HostCriterium_2_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_2_gen == 0 & ( Host$HostCriterium_2_gen == Host$HostCriterium_3_gen)]

# 3=1_1|1_2
Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_3_gen == 0 & ( Host$HostCriterium_3_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_3_gen == Host$HostCriterium_1_1_gen)] <-   Host$HostCriterium_3_gen[is.na(Host$FinalCal_gen) &!Host$HostCriterium_3_gen == 0 & ( Host$HostCriterium_3_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_3_gen == Host$HostCriterium_1_1_gen)]
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_3_gen == 0 & ( Host$HostCriterium_3_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_3_gen == Host$HostCriterium_1_1_gen)] <-   Host$HostCriterium_3_fam[is.na(Host$FinalCal_fam) &!Host$HostCriterium_3_gen == 0 & ( Host$HostCriterium_3_gen == Host$HostCriterium_1_2_gen | Host$HostCriterium_3_gen == Host$HostCriterium_1_1_gen)]
#1_1=1_2
Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_1_gen == 0 & ( Host$HostCriterium_1_1_gen == Host$HostCriterium_1_2_gen)] <-   Host$HostCriterium_1_1_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_1_gen == 0 & ( Host$HostCriterium_1_1_gen == Host$HostCriterium_1_2_gen)]
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_1_gen == 0 & ( Host$HostCriterium_1_1_gen == Host$HostCriterium_1_2_gen)] <-   Host$HostCriterium_1_1_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_1_gen == 0 & ( Host$HostCriterium_1_1_gen == Host$HostCriterium_1_2_gen)]

###  manually checked

##1_1
Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_1_gen == 0] <-  Host$HostCriterium_1_1_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_1_gen == 0]
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_1_gen == 0] <-  Host$HostCriterium_1_1_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_1_gen == 0]
Host$FinalCal_gen[rownames(Host) == "NODE_4_length_42073_cov_650_160444_S006-10"] <- "no genus"
Host$FinalCal_fam[rownames(Host) == "NODE_4_length_42073_cov_650_160444_S006-10"] <- "Enterobacteriaceae"
##2
Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_2_gen == 0] <-  Host$HostCriterium_2_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_2_gen == 0]
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_2_gen == 0] <-  Host$HostCriterium_2_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_2_gen == 0]

##1_2: check all
Host$BLASTN_completeDB_genus <- as.character(Host$BLASTN_completeDB_genus)
Host$DIAMOND_completeDB_genus <- as.character(Host$DIAMOND_completeDB_genus)

Host$BLASTN_completeDB_family <- as.character(Host$BLASTN_completeDB_family)
Host$DIAMOND_completeDB_family <- as.character(Host$DIAMOND_completeDB_family)

Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_2_gen == 0 & Host$BLASTN_completeDB_genus == Host$DIAMOND_completeDB_genus] <-  Host$HostCriterium_1_2_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_2_gen == 0 & Host$BLASTN_completeDB_genus == Host$DIAMOND_completeDB_genus]
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_2_gen == 0 & Host$BLASTN_completeDB_genus == Host$DIAMOND_completeDB_genus] <-  Host$HostCriterium_1_2_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_2_gen == 0 & Host$BLASTN_completeDB_genus == Host$DIAMOND_completeDB_genus]


Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_2_gen == 0 & Host$BLASTN_completeDB_family == Host$DIAMOND_completeDB_family] <-  Host$HostCriterium_1_2_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_2_gen == 0 & Host$BLASTN_completeDB_family == Host$DIAMOND_completeDB_family]


####################
# not corresponding  between methods:
####################
Host$FinalCal_gen[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_2_gen == 0] <-  "check"
Host$FinalCal_fam[is.na(Host$FinalCal_fam) & !Host$HostCriterium_1_2_gen == 0] <-   "check"

Host$FinalCal_gen[rownames(Host) %in% c('NODE_1_length_150337_cov_567_676181_S011-38','NODE_1_length_66331_cov_45_437392_S005-3','NODE_3_length_42931_cov_55_318430_S009-141')] <- NA
Host$FinalCal_fam[rownames(Host) %in% c('NODE_1_length_150337_cov_567_676181_S011-38','NODE_3_length_42931_cov_55_318430_S009-141','NODE_1_length_66331_cov_45_437392_S005-3')] <- NA


###################
## manual curation:
#####################
# just correcting no changing
Host$FinalCal_gen[rownames(Host) == 'NODE_18_length_35952_cov_174_895498_S010-136'] <- 'Lachnoclostridium' 
Host$FinalCal_gen[rownames(Host) == 'NODE_3_length_31276_cov_34_939101_S010-29'] <- 'Escherichia' 
Host$FinalCal_gen[rownames(Host) == 'NODE_4_length_35850_cov_161_650183_S007-50'] <- 'Shigella' 
Host$FinalCal_fam[rownames(Host) == 'NODE_2_length_35102_cov_311_275203_S009-201'] <- 'Lachnospiraceae' 

Host$FinalCal_gen[rownames(Host) == 'NODE_1_length_17528_cov_28_810326_S005-180'] <- 'Lachnoclostridium'  
Host$FinalCal_fam[rownames(Host) == 'NODE_1_length_17528_cov_28_810326_S005-180'] <- 'Lachnospiraceae' 

Host$FinalCal_gen[rownames(Host) == 'NODE_10_length_35162_cov_172_783611_S009-78'] <- 'Enterococcus'  
Host$FinalCal_fam[rownames(Host) == 'NODE_10_length_35162_cov_172_783611_S009-78'] <- 'Enterococcaceae' 

Host$FinalCal_gen[rownames(Host) == "NODE_11_length_21983_cov_15_813887_S007-86"] <- 'Veillonella'  
Host$FinalCal_fam[rownames(Host) == "NODE_11_length_21983_cov_15_813887_S007-86"] <- 'Veillonellaceae' 

Host$FinalCal_gen[rownames(Host) == "NODE_2_length_43025_cov_346_690416_S007-88"] <- 'no genus'  #unclassified
Host$FinalCal_fam[rownames(Host) == "NODE_2_length_43025_cov_346_690416_S007-88"] <- 'Lachnospiraceae' 


Host$FinalCal_gen[rownames(Host) == "NODE_3_length_30468_cov_33_208746_S004-162"] <- 'Bacteroides'  #
Host$FinalCal_fam[rownames(Host) == "NODE_3_length_30468_cov_33_208746_S004-162"] <- 'Bacteroidaceae' 

Host$FinalCal_gen[rownames(Host) == "NODE_3_length_57048_cov_55_464394_S010-144"] <- 'Bacteroides'  #
Host$FinalCal_fam[rownames(Host) == "NODE_3_length_57048_cov_55_464394_S010-144"] <- 'Bacteroidaceae' 

Host$FinalCal_gen[rownames(Host) == "NODE_4_length_64877_cov_55_700664_S010-136"] <- 'Clostridium'  #Clostridium
Host$FinalCal_fam[rownames(Host) == "NODE_4_length_64877_cov_55_700664_S010-136"] <- 'Clostridiaceae' 

#weird blastn
Host$FinalCal_gen[rownames(Host) == 'NODE_3_length_40578_cov_239_911410_S007-61'] <- 'Veilonella' #just genus is weird using blastn

# no correspondance at genus level but family level is ok
Host$FinalCal_gen[rownames(Host) == 'NODE_1_length_47009_cov_1898_666113_S004-107'] <- 'no genus' 
Host$FinalCal_gen[rownames(Host) == 'NODE_5_length_34530_cov_186_839608_S011-25'] <- 'no genus' 
Host$FinalCal_gen[rownames(Host) == 'NODE_2_length_35102_cov_311_275203_S009-201'] <- 'no genus' 

Host$FinalCal_gen[rownames(Host) == "NODE_2_length_42150_cov_36_956647_S006-28"] <- NA
Host$FinalCal_fam[rownames(Host) == "NODE_2_length_42150_cov_36_956647_S006-28"] <-  NA

Host$FinalCal_gen[rownames(Host) == "NODE_1_length_45934_cov_182_727501_S006-128"] <- 'Bacteroides'
Host$FinalCal_fam[rownames(Host) == "NODE_1_length_45934_cov_182_727501_S006-128"] <-  'Bacteroidaceae'
Host$HostCriterium_2_gen[rownames(Host) == "NODE_1_length_45934_cov_182_727501_S006-128"] <- 'Bacteroides'
Host$HostCriterium_2_fam[rownames(Host) == "NODE_1_length_45934_cov_182_727501_S006-128"] <-  'Bacteroidaceae'

Host$FinalCal_gen[rownames(Host) == "NODE_25_length_33183_cov_86_180783_S010-136"] <- 'Clostridium'
Host$FinalCal_fam[rownames(Host) == "NODE_25_length_33183_cov_86_180783_S010-136"] <-  'Clostridiaceae'
Host$HostCriterium_2_gen[rownames(Host) == "NODE_25_length_33183_cov_86_180783_S010-136"] <- 'Clostridium'
Host$HostCriterium_2_fam[rownames(Host) == "NODE_25_length_33183_cov_86_180783_S010-136"] <-  'Clostridiaceae'


Host$FinalCal_gen[rownames(Host) == "NODE_1_length_44205_cov_44_758181_S005-183"] <- NA
Host$FinalCal_fam[rownames(Host) == "NODE_1_length_44205_cov_44_758181_S005-183"] <-  NA
#

Host$FinalCal_fam[!is.na(Host$FinalCal_fam) &Host$FinalCal_fam == "no family" & Host$HostCriterium_1_2_fam == "Lachnospiraceae" & Host$DIAMOND_completeDB_family == "Lachnospiraceae"] <- 'Lachnospiraceae'

##############
fams <- unique(Host$FinalCal_fam)
fams <- fams[!is.na(fams)]
Host$phylum <- 0
fams <- fams[!fams == c('check')]

for(fam in fams){
if (fam == "Clostridiaceae"){
   Host$phylum[Host$FinalCal_fam == fam &!is.na(Host$FinalCal_fam)] <- 'Firmicutes'
}else
if (fam == "Barnesiellaceae"){
   Host$phylum[Host$FinalCal_fam == fam &!is.na(Host$FinalCal_fam)] <- 'Bacteroidetes'
}else
if (fam %in%c("Propionibacteriaceae",'Eggerthellaceae','Atopobiaceae','Micrococcaceae')){
   Host$phylum[Host$FinalCal_fam == fam &!is.na(Host$FinalCal_fam)] <- 'Actinobacteria'
} 
else{ Host$phylum[Host$FinalCal_fam == fam &!is.na(Host$FinalCal_fam)] <- as.character(bacterial_taxa$Phylum[bacterial_taxa$Family == fam])}

}

table(is.na(Host$FinalCal_gen))
table(is.na(Host$FinalCal_fam))
table(Host$FinalCal_fam)

Host$FinalCal_fam <- as.character(Host$FinalCal_fam)
Host$phylum <- as.character(Host$phylum)
ggplot(Host[!is.na(Host$FinalCal_fam) & !Host$FinalCal_fam == 0 ,]) + geom_bar(aes(x=FinalCal_fam, fill=phylum),position = position_dodge2(width = 0.9, preserve = "single"))+
  theme_LB() +
  #facet_wrap("phylum", scales='free_y')+
  facet_grid(phylum~., scales="free_y", space= "free_y")+
#  scale_fill_LB(4) +
  coord_flip()


# check some weird  hosts
Host[!is.na(Host$FinalCal_fam) & Host$FinalCal_fam == 'no family',] # most are good so change :) 
Host[is.na(Host$FinalCal_gen) & !Host$HostCriterium_1_2_gen == 0,] 
Host$FinalCal_fam[Host$FinalCal_fam == "check" &!is.na(Host$FinalCal_fam) ] <- NA
Host$FinalCal_gen[Host$FinalCal_gen == "check" &!is.na(Host$FinalCal_gen) ] <- NA
## plot venndiagram
library(venneuler)
library(VennDiagram)
BLASTN=rownames( Host[!(is.na(Host$HostCriterium_1_1_fam) |is.na(Host$HostCriterium_1_2_fam)) & (!(Host$HostCriterium_1_1_fam ==0) | !(Host$HostCriterium_1_2_fam ==0 )) & !Host$FinalCal_fam == "no family" & !is.na(Host$FinalCal_fam),] )
CRISPR=rownames( Host[!(is.na(Host$HostCriterium_2_fam)) & !(Host$HostCriterium_2_fam %in% c(0,'no family'))& !Host$FinalCal_fam == "no family" & !is.na(Host$FinalCal_fam),] )
TRNA=  rownames( Host[!(is.na(Host$HostCriterium_3_fam)) & !(Host$HostCriterium_3_fam %in% c(0,'no family'))& !Host$FinalCal_fam == "no family" & !is.na(Host$FinalCal_fam),] )
myCol <- get_palette(PAL_LB,3)

venn.diagram(
  x = list(BLASTN,CRISPR,TRNA),
  category.names = c("BLASTn" , "Crispr " , "tRNA"),
 filename = '/Users/Leentje/Documents/Phd/ViromeAnalysis_Jan2020/2020-07-05/HOST_venn_diagramm.png',
 output=TRUE,

        # Circles
        lwd = 2,
        lty = 'blank',
        fill = myCol,
        
        # Numbers
        cex = .6,
        fontface = "bold",

        # Set names
        cat.cex = 0.6,
        cat.fontface = "bold",
        cat.default.pos = "outer",
        cat.pos = c(-27, 27, 135),
        cat.dist = c(0.055, 0.055, 0.085),
        cat.fontfamily = "sans",
        rotation = 1
)

table(Host$FinalCal_Confirmation[!is.na(Host$FinalCal_fam)])

@
<<host confirmation>>=

#  cooccurences!! 
Host$FinalCal_Confirmation <- NA
Host$FinalCal_Confirmation_ASV <- NA
Host$FinalCal_Confirmation_ASV_name <- NA
Host$FinalCal_Confirmation_ASV_spearman <- NA
Host$FinalCal_Confirmation_interval <- NA
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/", sep=""))
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/Confident", sep=""))

#Bacterial DB is not organised according to NCBI
bacterial_taxa$Genus <- as.character(bacterial_taxa$Genus)
for (gen  in unique(Host$FinalCal_gen)[!is.na(unique(Host$FinalCal_gen))]){
  if (length(unique(bacterial_taxa$Family[bacterial_taxa$Genus == gen]))  == 0 ){
    print('-----')
    print(gen)
    print(unique(Host$FinalCal_fam[Host$FinalCal_gen == gen & !is.na(Host$FinalCal_gen)]))
    print(unique(bacterial_taxa$Family[bacterial_taxa$Genus == gen]))
  }   
  else if (!unique(Host$FinalCal_fam[Host$FinalCal_gen == gen & !is.na(Host$FinalCal_gen)]) ==  unique(bacterial_taxa$Family[bacterial_taxa$Genus == gen]) ){
    print('-----')
    print(gen)
    print(unique(Host$FinalCal_fam[Host$FinalCal_gen == gen & !is.na(Host$FinalCal_gen)]))
    print(unique(bacterial_taxa$Family[bacterial_taxa$Genus == gen]))
  } 
}
bacterial_taxa$Family[bacterial_taxa$Genus == "Coprobacter"] <- "Barnesiellaceae"
bacterial_taxa$Family[bacterial_taxa$Genus == "Eggerthella"] <- "Eggerthellaceae"
bacterial_taxa$Family[bacterial_taxa$Genus == "Hungatella"] <- "Clostridiaceae"
bacterial_taxa$Genus[bacterial_taxa$Genus == "Veillonella"] <- "Veilonella"
bacterial_taxa$Genus[bacterial_taxa$Genus == "Veilonella"] <- "Veilonella"
bacterial_taxa$Genus[bacterial_taxa$Genus == "Shigella"] <- "Escherichia"
bacterial_taxa$Genus[bacterial_taxa$Genus == "Clostridium_sensu_stricto"] <- "Clostridium"
bacterial_taxa$Family[bacterial_taxa$Family == "Clostridiaceae_1"] <- "Clostridiaceae"
bacterial_taxa$Family[bacterial_taxa$Family == "Clostridiaceae_1"] <- "Clostridiaceae"

## bacterial_genera <- unique(bacterial_taxa$Genus)
## viralpred_genera <- unique(Host$FinalCal_gen)[!is.na(unique(Host$FinalCal_gen))]


rownames(bacterial_taxa) <- bacterial_taxa$OTU
############
# IS phages:
table(Host$InfantSpecific)
rownames(Host) <- Host$Row.names
rownames(Host) <- Host$X
table(Host$InfantSpecific[!is.na(Host$FinalCal_gen)])
table(Host$InfantSpecific[!is.na(Host$FinalCal_fam)])
TRESHOLD <- 0 #signifiance is treshold
FDR <- 0.05
# @  genus level
for (phage in rownames(Host[Host$InfantSpecific == "Yes" & !is.na(Host$FinalCal_gen),])){
infant = Host$InfantSpecific_i[rownames(Host) == phage]
predhost_fam <-Host$FinalCal_fam[rownames(Host) == phage]
predhost_gen <-Host$FinalCal_gen[rownames(Host) == phage]

table_cor <- read.csv(file = paste(Workdir, "Output_ProkaryoticVirome_2021-01-19", "/Phage_16S_correlation/", phage,  "/Plot_BactvsVir_spearman_",phage,"_", infant,".csv",sep=""))
table_cor <-  unique(table_cor[,colnames(table_cor) %in% c('variable','spearman','p.value','p.value.adjusted')])
table_cor <- table_cor[!is.na(table_cor$spearman),]
rownames(table_cor) <- table_cor$variable
table_cor$variable <-  NULL
table_cor <- merge(table_cor, bacterial_taxa,  by=0)
table_cor <- table_cor %>% mutate_all(as.character())
table_cor$spearman <- as.numeric(table_cor$spearman)
table_cor <- table_cor[rev(order(table_cor$spearman)),]

if (nrow(table_cor[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR,]) >0 ){
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "Yes"
Host$FinalCal_Confirmation_ASV[rownames(Host) == phage] <- table_cor$OTU[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
Host$FinalCal_Confirmation_ASV_spearman[rownames(Host) == phage] <- table_cor$spearman[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]

plot <- as.data.frame(t(table_bacteria[table_bacteria$OTU == table_cor$OTU[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], grepl(infant,colnames(table_bacteria)) &  !grepl('Pre',colnames(table_bacteria)) ]))
plot$Sample.ID <- rownames(plot)
colnames(plot)[1] <- as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
plot <- merge(plot, meta.virome[,colnames(meta.virome) %in% c('X.days','Sample.ID')], by="Sample.ID")
vir <- as.data.frame(RAREFIEDREADS[,colnames(RAREFIEDREADS) %in% c(phage,"Sample.ID")])
colnames(vir)[1] <- phage
vir[,1] <- vir[,1]/max(sample_sums(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))

plot <- merge(plot, vir , by="Sample.ID")
plot_ <- melt(plot, id.vars = c('Sample.ID','X.days'))
max_ab_phage <- max(plot_$value[plot_$variable == phage & plot_$value >0])
max_ab_host <- max(plot_$value[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0])

hostconf <- ggplot(plot_, aes(x=X.days, y=value, color=variable))+
  geom_line(size=1.25, alpha=0.9)+
    geom_point(size=1.5)+
  theme_LB()+
  scale_color_LB(2)+
  xlab("Days After Birth")+
  ylab("Abundance")+
  ggtitle("spearman's r=",paste(table_cor$spearman[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], sep=""))+
  facet_wrap(~variable, scale="free", ncol=1)+
  theme(legend.position = "none")+
  
 geom_vline(data=plot_[plot_$variable == phage,], aes(xintercept = min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage])), colour=get_palette(PAL_LB,2)[2], linetype = "longdash")+
  
  geom_text(data=plot_[plot_$variable == phage,], aes(x=min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), label=paste("Phage Detection: day ",min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), sep=""), y=max(plot_$value[plot_$variable == phage])/0.8), colour=get_palette(PAL_LB,2)[2], angle=0, cex=3) +
  
 geom_vline(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(xintercept = min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])), colour=get_palette(PAL_LB,2)[1], linetype = "longdash")+
  
  geom_text(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD][1]),], aes(x=min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), label=paste("Host Detection: day ",min(plot_$X.days[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), sep=""), y=max(plot_$value[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])])/0.8), colour=get_palette(PAL_LB,2)[1], angle=0, cex=3) 
  

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/Confident/Host_PredictedAndConfirmed_atgenus_",phage,".pdf",sep=""))
print(hostconf)
dev.off()

Host$FinalCal_Confirmation_interval[rownames(Host) == phage] <-  min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]) - min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])

}else{
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "No_notatgenuslevel"
Host$FinalCal_Confirmation_ASV[rownames(Host) == phage] <- table_cor$OTU[table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- as.character(table_cor$OTU_short[ table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
Host$FinalCal_Confirmation_ASV_spearman[rownames(Host) == phage] <- table_cor$spearman[ table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
}


}
# @ fam  level
for (phage in rownames(Host[Host$InfantSpecific == "Yes" & !is.na(Host$FinalCal_fam)  & !Host$FinalCal_Confirmation ==  "Yes" ,])){
infant = Host$InfantSpecific_i[rownames(Host) == phage]
predhost_fam <-Host$FinalCal_fam[rownames(Host) == phage]
predhost_gen <-Host$FinalCal_gen[rownames(Host) == phage]


table_cor <- read.csv(file = paste(Workdir, "Output_ProkaryoticVirome_2021-01-19", "/Phage_16S_correlation/", phage,  "/Plot_BactvsVir_spearman_",phage,"_", infant,".csv",sep=""))
table_cor <-  unique(table_cor[,colnames(table_cor) %in% c('variable','spearman','p.value','p.value.adjusted')])
table_cor <- table_cor[!is.na(table_cor$spearman),]
rownames(table_cor) <- table_cor$variable
table_cor$variable <-  NULL
table_cor <- merge(table_cor, bacterial_taxa,  by=0)
table_cor <- table_cor %>% mutate_all(as.character())
table_cor$spearman <- as.numeric(table_cor$spearman)
table_cor <- table_cor[rev(order(table_cor$spearman)),]

if (nrow(table_cor[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR,]) >0 ){
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "Yes"
Host$FinalCal_Confirmation_ASV[rownames(Host) == phage] <- table_cor$OTU[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
Host$FinalCal_Confirmation_ASV_spearman[rownames(Host) == phage] <- table_cor$spearman[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]

plot <- as.data.frame(t(table_bacteria[table_bacteria$OTU == table_cor$OTU[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], grepl(infant,colnames(table_bacteria)) &  !grepl('Pre',colnames(table_bacteria)) ]))
plot$Sample.ID <- rownames(plot)
colnames(plot)[1] <- as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
plot <- merge(plot, meta.virome[,colnames(meta.virome) %in% c('X.days','Sample.ID')], by="Sample.ID")
vir <- as.data.frame(RAREFIEDREADS[,colnames(RAREFIEDREADS) %in% c(phage,"Sample.ID")])
colnames(vir)[1] <- phage
vir[,1] <- vir[,1]/max(sample_sums(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))

plot <- merge(plot, vir , by="Sample.ID")
plot_ <- melt(plot, id.vars = c('Sample.ID','X.days'))
max_ab_phage <- max(plot_$value[plot_$variable == phage & plot_$value >0])
max_ab_host <- max(plot_$value[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0])

hostconf <- ggplot(plot_, aes(x=X.days, y=value, color=variable))+
  geom_line(size=1.25, alpha=0.9)+
    geom_point(size=1.5)+
  theme_LB()+
  scale_color_LB(2)+
  xlab("Days After Birth")+
  ylab("Abundance")+
  ggtitle("spearman's r=",paste(table_cor$spearman[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], sep=""))+
  facet_wrap(~variable, scale="free", ncol=1)+
  theme(legend.position = "none")+
 geom_vline(data=plot_[plot_$variable == phage,], aes(xintercept = min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage])), colour=get_palette(PAL_LB,2)[2], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == phage,], aes(x=min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), label=paste("Phage Detection: day ",min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), sep=""), y=max(plot_$value[plot_$variable == phage])/0.8), colour=get_palette(PAL_LB,2)[2], angle=0, cex=3) +
  
 geom_vline(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(xintercept = min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])), colour=get_palette(PAL_LB,2)[1], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(x=min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), label=paste("Host Detection: day ",min(plot_$X.days[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), sep=""), y=max(plot_$value[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])])/0.8), colour=get_palette(PAL_LB,2)[1], angle=0, cex=3) 
  

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/Confident/Host_PredictedAndConfirmed_atfamily_",phage,".pdf",sep=""))
print(hostconf)
dev.off()

Host$FinalCal_Confirmation_interval[rownames(Host) == phage] <-  min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]) - min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])

}else
if (nrow(table_cor[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR,]) >0 ){
  Host$FinalCal_Confirmation[rownames(Host) == phage] <- "Yes_lowtreshold"
Host$FinalCal_Confirmation_ASV[rownames(Host) == phage] <- table_cor$OTU[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
Host$FinalCal_Confirmation_ASV_spearman[rownames(Host) == phage] <- table_cor$spearman[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]

plot <- as.data.frame(t(table_bacteria[table_bacteria$OTU == table_cor$OTU[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], grepl(infant,colnames(table_bacteria)) &  !grepl('Pre',colnames(table_bacteria)) ]))
plot$Sample.ID <- rownames(plot)
colnames(plot)[1] <- as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
plot <- merge(plot, meta.virome[,colnames(meta.virome) %in% c('X.days','Sample.ID')], by="Sample.ID")
vir <- as.data.frame(RAREFIEDREADS[,colnames(RAREFIEDREADS) %in% c(phage,"Sample.ID")])
colnames(vir)[1] <- phage
vir[,1] <- vir[,1]/max(sample_sums(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))

plot <- merge(plot, vir , by="Sample.ID")
plot_ <- melt(plot, id.vars = c('Sample.ID','X.days'))

hostconf <- ggplot(plot_, aes(x=X.days, y=value, color=variable))+
  geom_line(size=1.25, alpha=0.9)+
    geom_point(size=1.5)+
  theme_LB()+
  scale_color_LB(2)+
  xlab("Days After Birth")+
  ylab("Abundance")+
  ggtitle("spearman's r=",paste(table_cor$spearman[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], sep=""))+
  facet_wrap(~variable, scale="free", ncol=1)+
  theme(legend.position = "none")+
 geom_vline(data=plot_[plot_$variable == phage,], aes(xintercept = min(plot_$X.days[plot_$variable == phage & plot_$value >0])), colour=get_palette(PAL_LB,2)[2], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == phage,], aes(x=min(plot_$X.days[plot_$variable == phage & plot_$value >0]), label=paste("Phage Detection: day ",min(plot_$X.days[plot_$variable == phage & plot_$value >0]), sep=""), y=max(plot_$value[plot_$variable == phage])/0.8), colour=get_palette(PAL_LB,2)[2], angle=0, cex=3) +
  
 geom_vline(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(xintercept = min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0])), colour=get_palette(PAL_LB,2)[1], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(x=min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0]), label=paste("Host Detection: day ",min(plot_$X.days[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0]), sep=""), y=max(plot_$value[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])])/0.8), colour=get_palette(PAL_LB,2)[1], angle=0, cex=3) 
  

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/LessConfident/Host_PredictedAndConfirmed_",phage,".pdf",sep=""))
print(hostconf)
dev.off()

Host$FinalCal_Confirmation_interval[rownames(Host) == phage] <-  min(plot_$X.days[plot_$variable == phage & plot_$value >0]) - min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0])

}else   {
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "No_notatfamilylevel"
Host$FinalCal_Confirmation_ASV[rownames(Host) == phage] <- table_cor$OTU[table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- as.character(table_cor$OTU_short[ table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
Host$FinalCal_Confirmation_ASV_spearman[rownames(Host) == phage] <- table_cor$spearman[ table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
}


}

# NIS phages:
TRESHOLD <- 0 # mss zelfs lager?
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/Confident_NIS/",sep=""))
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/LessConfident_NIS/",sep=""))

# @  genus level
for (phage in rownames(Host[Host$InfantSpecific == "No" & !is.na(Host$FinalCal_gen),])){
infantsofinterest <- gsub('Presence_r2_','',colnames(MasterTable_150[rownames(MasterTable_150) == phage,grepl("Presence_r2_S",colnames(MasterTable_150))]) [MasterTable_150[rownames(MasterTable_150) == phage, grepl("Presence_r2_S",colnames(MasterTable_150))] > 1])
infants_ <- c('phage','infant','host','genus','interval')
if (length(infantsofinterest) >0){
for (infant in infantsofinterest){
table_cor <- read.csv(file = paste(Workdir, "Output_ProkaryoticVirome_2021-01-19", "/Phage_16S_correlation/", phage,  "/Plot_BactvsVir_spearman_",phage,"_", infant,".csv",sep=""))
if (!any(grepl('spearman', colnames(table_cor)))) {
  infantsofinterest <- infantsofinterest[!infantsofinterest  == infant]
}}}
if (length(infantsofinterest) >0){
for (infant in infantsofinterest){
predhost_fam <-Host$FinalCal_fam[rownames(Host) == phage]
predhost_gen <-Host$FinalCal_gen[rownames(Host) == phage]

table_cor <- read.csv(file = paste(Workdir, "Output_ProkaryoticVirome_2021-01-19", "/Phage_16S_correlation/", phage,  "/Plot_BactvsVir_spearman_",phage,"_", infant,".csv",sep=""))
table_cor <-  unique(table_cor[,colnames(table_cor) %in% c('variable','spearman','p.value','p.value.adjusted')])
table_cor <- table_cor[!is.na(table_cor$spearman),]
rownames(table_cor) <- table_cor$variable
table_cor$variable <-  NULL
table_cor <- merge(table_cor, bacterial_taxa,  by=0)
table_cor <- table_cor %>% mutate_all(as.character())
table_cor$spearman <- as.numeric(table_cor$spearman)
table_cor <- table_cor[rev(order(table_cor$spearman)),]

if (nrow(table_cor[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR,]) >0 ){
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "Yes"
Host$FinalCal_Confirmation_ASV[rownames(Host) == phage] <- table_cor$OTU[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
Host$FinalCal_Confirmation_ASV_spearman[rownames(Host) == phage] <- table_cor$spearman[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]

plot <- as.data.frame(t(table_bacteria[table_bacteria$OTU == table_cor$OTU[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], grepl(infant,colnames(table_bacteria)) &  !grepl('Pre',colnames(table_bacteria)) ]))
plot$Sample.ID <- rownames(plot)
colnames(plot)[1] <- as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
plot <- merge(plot, meta.virome[,colnames(meta.virome) %in% c('X.days','Sample.ID')], by="Sample.ID")
vir <- as.data.frame(RAREFIEDREADS[,colnames(RAREFIEDREADS) %in% c(phage,"Sample.ID")])
colnames(vir)[1] <- phage
vir[,1] <- vir[,1]/max(sample_sums(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))

plot <- merge(plot, vir , by="Sample.ID")
plot_ <- melt(plot, id.vars = c('Sample.ID','X.days'))
max_ab_phage <- max(plot_$value[plot_$variable == phage & plot_$value >0])
max_ab_host <- max(plot_$value[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0])

hostconf <- ggplot(plot_, aes(x=X.days, y=value, color=variable))+
  geom_line(size=1.25, alpha=0.9)+
    geom_point(size=1.5)+
  theme_LB()+
  scale_color_LB(2)+
  xlab("Days After Birth")+
  ylab("Abundance")+
  ggtitle("spearman's r=",paste(table_cor$spearman[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], sep=""))+
  facet_wrap(~variable, scale="free", ncol=1)+
  theme(legend.position = "none")+
 geom_vline(data=plot_[plot_$variable == phage,], aes(xintercept = min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage])), colour=get_palette(PAL_LB,2)[2], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == phage,], aes(x=min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), label=paste("Phage Detection: day ",min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), sep=""), y=max(plot_$value[plot_$variable == phage])/0.8), colour=get_palette(PAL_LB,2)[2], angle=0, cex=3) +
  
 geom_vline(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(xintercept = min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])), colour=get_palette(PAL_LB,2)[1], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(x=min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), label=paste("Host Detection: day ",min(plot_$X.days[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), sep=""), y=max(plot_$value[plot_$variable == as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])])/0.8), colour=get_palette(PAL_LB,2)[1], angle=0, cex=3) 
  

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/Confident_NIS/Host_PredictedAndConfirmed_atgenus_",phage,"_",infant,".pdf",sep=""))
print(hostconf)
dev.off()

infants_ <-  rbind(infants_, c(phage,infant, as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) , as.character(table_cor$Genus[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]), min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]) - min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Genus == predhost_gen & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])))

}else{
  infants_ <-  rbind(infants_, c(phage,infant, "No_notatgenuslevel","No_notatgenuslevel","0"))
}
}
infants_ <- as.data.frame(infants_)
infants_  <- infants_[-1,] 
if (length(unique(infants_[,4])) == 1 & !unique(infants_[,4]) == "No_notatgenuslevel"){
  Host$FinalCal_Confirmation_interval[rownames(Host) == phage] <-  mean(as.numeric(as.character(infants_[,5])))
  Host$FinalCal_Confirmation[rownames(Host) == phage] <- "Yes_atgenuslevel"
  Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- paste(as.character(unique(infants_[,3])), collapse="+")

}

else{
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "No_notatgenuslevel"

}
}
}

# @ fam  level
for (phage in rownames(Host[Host$InfantSpecific == "No" & !is.na(Host$FinalCal_fam)   &  !is.na(Host$FinalCal_Confirmation) & !Host$FinalCal_Confirmation ==  "Yes_atgenuslevel" ,])){
  if(!phage=="NA"){
infantsofinterest <- gsub('Presence_r2_','',colnames(MasterTable_150[rownames(MasterTable_150) == phage,grepl("Presence_r2_S",colnames(MasterTable_150))]) [MasterTable_150[rownames(MasterTable_150) == phage, grepl("Presence_r2_S",colnames(MasterTable_150))] > 1])
infants_ <- c('phage','infant','host','family','interval')
if (length(infantsofinterest) >0){
for (infant in infantsofinterest){
table_cor <- read.csv(file = paste(Workdir, "Output_ProkaryoticVirome_2021-01-19", "/Phage_16S_correlation/", phage,  "/Plot_BactvsVir_spearman_",phage,"_", infant,".csv",sep=""))
if (!any(grepl('spearman', colnames(table_cor)))) {
  infantsofinterest <- infantsofinterest[!infantsofinterest  == infant]
}}}
if (length(infantsofinterest) >0){
for (infant in infantsofinterest){
predhost_fam <-Host$FinalCal_fam[rownames(Host) == phage]
predhost_gen <-Host$FinalCal_gen[rownames(Host) == phage]


table_cor <- read.csv(file = paste(Workdir, "Output_ProkaryoticVirome_2021-01-19", "/Phage_16S_correlation/", phage,  "/Plot_BactvsVir_spearman_",phage,"_", infant,".csv",sep=""))
table_cor <-  unique(table_cor[,colnames(table_cor) %in% c('variable','spearman','p.value','p.value.adjusted')])
table_cor <- table_cor[!is.na(table_cor$spearman),]
rownames(table_cor) <- table_cor$variable
table_cor$variable <-  NULL
table_cor <- merge(table_cor, bacterial_taxa,  by=0)
table_cor <- table_cor %>% mutate_all(as.character())
table_cor$spearman <- as.numeric(table_cor$spearman)
table_cor <- table_cor[rev(order(table_cor$spearman)),]

if (nrow(table_cor[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR,]) >0 ){
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "Yes"
Host$FinalCal_Confirmation_ASV[rownames(Host) == phage] <- table_cor$OTU[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]
Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
Host$FinalCal_Confirmation_ASV_spearman[rownames(Host) == phage] <- table_cor$spearman[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]

plot <- as.data.frame(t(table_bacteria[table_bacteria$OTU == table_cor$OTU[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], grepl(infant,colnames(table_bacteria)) &  !grepl('Pre',colnames(table_bacteria)) ]))
plot$Sample.ID <- rownames(plot)
colnames(plot)[1] <- as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])
plot <- merge(plot, meta.virome[,colnames(meta.virome) %in% c('X.days','Sample.ID')], by="Sample.ID")
vir <- as.data.frame(RAREFIEDREADS[,colnames(RAREFIEDREADS) %in% c(phage,"Sample.ID")])
colnames(vir)[1] <- phage
vir[,1] <- vir[,1]/max(sample_sums(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads))

plot <- merge(plot, vir , by="Sample.ID")
plot_ <- melt(plot, id.vars = c('Sample.ID','X.days'))
max_ab_phage <- max(plot_$value[plot_$variable == phage & plot_$value >0])
max_ab_host <- max(plot_$value[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0])

hostconf <- ggplot(plot_, aes(x=X.days, y=value, color=variable))+
  geom_line(size=1.25, alpha=0.9)+
    geom_point(size=1.5)+
  theme_LB()+
  scale_color_LB(2)+
  xlab("Days After Birth")+
  ylab("Abundance")+
  ggtitle("spearman's r=",paste(table_cor$spearman[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1], sep=""))+
  facet_wrap(~variable, scale="free", ncol=1)+
  theme(legend.position = "none")+
 geom_vline(data=plot_[plot_$variable == phage,], aes(xintercept = min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage])), colour=get_palette(PAL_LB,2)[2], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == phage,], aes(x=min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), label=paste("Phage Detection: day ",min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]), sep=""), y=max(plot_$value[plot_$variable == phage])/0.8), colour=get_palette(PAL_LB,2)[2], angle=0, cex=3) +
  
 geom_vline(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(xintercept = min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])), colour=get_palette(PAL_LB,2)[1], linetype = "longdash")+
  geom_text(data=plot_[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]),], aes(x=min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), label=paste("Host Detection: day ",min(plot_$X.days[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host]), sep=""), y=max(plot_$value[plot_$variable == as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1])])/0.8), colour=get_palette(PAL_LB,2)[1], angle=0, cex=3) 
  

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_HostPrediction_and_Confirmation/Confident_NIS/Host_PredictedAndConfirmed_atfamily_",phage,"_",infant,".pdf",sep=""))
print(hostconf)
dev.off()

infants_ <-  rbind(infants_, c(phage,infant, as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) , as.character(table_cor$Family[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]), min(plot_$X.days[plot_$variable == phage & plot_$value >0.00*max_ab_phage]) - min(plot_$X.days[plot_$variable ==  as.character(table_cor$OTU_short[table_cor$Family == predhost_fam & table_cor$spearman  > TRESHOLD & table_cor$p.value < 0.05 & table_cor$p.value.adjusted < FDR][1]) & plot_$value >0.00*max_ab_host])))

}else{
  infants_ <-  rbind(infants_, c(phage,infant, "No_notatfamilylevel","No_notatfamilylevel","0"))
}
}

infants_ <- as.data.frame(infants_)
infants_  <- infants_[-1,] 
if (length(unique(infants_[,4])) == 1 & !unique(infants_[,4]) == "No_notatfamilylevel"){
  Host$FinalCal_Confirmation_interval[rownames(Host) == phage] <-  mean(as.numeric(as.character(unique(infants_[,5]))))
  Host$FinalCal_Confirmation[rownames(Host) == phage] <- "Yes_atfamilylevel"
  Host$FinalCal_Confirmation_ASV_name[rownames(Host) == phage] <- paste(as.character(unique(infants_[,3])), collapse="+")

}
else{
Host$FinalCal_Confirmation[rownames(Host) == phage] <- "No_notatfamilylevel"

}
}}

}


Host$FinalCal_Confirmation[Host$FinalCal_Confirmation  == 'Yes_atgenuslevel'] <- 'Yes'
Host$FinalCal_Confirmation[Host$FinalCal_Confirmation  == 'Yes_atfamilylevel'] <- 'Yes'
Host$FinalCal_Confirmation[Host$FinalCal_Confirmation  == 'No_notatfamilylevel'] <- 'No'
Host$FinalCal_Confirmation[Host$FinalCal_Confirmation  == 'No_notatgenuslevel'] <- 'No'

Host$FinalCal_Confirmation[rownames(Host) == "NODE_1_length_65087_cov_238_346054_S004-153"] <- 'No' # in every  infant only 1 timepoint
table(Host$FinalCal_Confirmation[Host$InfantSpecific == "Yes"])
table(Host$FinalCal_Confirmation[Host$InfantSpecific == "No"])
table(Host$FinalCal_Confirmation)
summary(Host$FinalCal_Confirmation_ASV_spearman[!is.na(Host$FinalCal_Confirmation) & Host$FinalCal_Confirmation  == "Yes"])

#FDR=0.05 -> 126/(126+119) % confirmed  (min Spearman is 0.39)

############

############

### check intervals

Host$FinalCal_Confirmation_interval_ <- Host$FinalCal_Confirmation_interval
Host$FinalCal_Confirmation_interval_[Host$FinalCal_Confirmation_interval  < 0  & !is.na(Host$FinalCal_Confirmation_interval)] <- 'Phage_first'
Host$FinalCal_Confirmation_interval_[Host$FinalCal_Confirmation_interval  > 0 & !is.na(Host$FinalCal_Confirmation_interval)] <-  'Host_first'
Host$FinalCal_Confirmation_interval_[Host$FinalCal_Confirmation_interval  == 0 & !is.na(Host$FinalCal_Confirmation_interval)] <- 'Together'

table(Host$FinalCal_Confirmation_interval_[Host$FinalCal_Confirmation == 'Yes' & !is.na(Host$FinalCal_Confirmation)])
range(Host$FinalCal_Confirmation_interval[Host$FinalCal_Confirmation == 'Yes' & !is.na(Host$FinalCal_Confirmation)])

summary(Host$FinalCal_Confirmation_interval[Host$FinalCal_Confirmation == 'Yes' & !is.na(Host$FinalCal_Confirmation)])

#phage first: 
rownames(Host[Host$FinalCal_Confirmation == 'Yes' & !is.na(Host$FinalCal_Confirmation) & Host$FinalCal_Confirmation_interval_ == "Phage_first", ])



@
\subsection*{Lifestyle}
<<lifestyle>>=
dir.create(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_Lifestyle/",sep=""))

Lifestyle  <- MasterTable_150[rownames(MasterTable_150) %in% taxa_names(ps_virome_r2_VIRUS_ProkaryoticVirome_CompleteCheckV_reads), grepl('PHACTS',  colnames(MasterTable_150))]

Key_table <-  read.csv(paste(Workdir, "Data_Github/CenoteTaker_categories.csv", sep=""))
Key_table_ <-  read.csv(paste(Workdir, "Data_Github/CenoteTaker_categories_.csv", sep=""))



#################################
# LIFESTYLE FINAL CLASSIFICATION
#################################
Lifestyle$FINAL_LYSOGENIC <- 'No'
# Integrases
Lifestyle$Integrase <- "No"
Lifestyle$Integrase[rownames(Lifestyle) %in% Key_table_$contig[Key_table_$product %in% Key_table$product[grepl('Integrase',Key_table$product , ignore.case = TRUE)]]] <- 'Yes'
Lifestyle$FINAL_LYSOGENIC[Lifestyle$Integrase == "Yes"] <-  "Yes" # 194
# Repressors
Lifestyle$Repressor <- "No"
Lifestyle$Repressor[rownames(Lifestyle) %in% Key_table_$contig[Key_table_$product %in% Key_table$product[grepl('Transcription_regulation_indicationlysogeny',Key_table$CAT , ignore.case = TRUE)]]] <- 'Yes'
Lifestyle$FINAL_LYSOGENIC[Lifestyle$Repressor == "Yes"] <-  "Yes" # 194+26 = 220
# transposase
Lifestyle$transposase <- "No"
Lifestyle$transposase[rownames(Lifestyle) %in% Key_table_$contig[Key_table_$product %in% Key_table$product[grepl('transposase',Key_table$product , ignore.case = T )]]] <- 'Yes'
Lifestyle$FINAL_LYSOGENIC[Lifestyle$transposase == "Yes"] <-  "Yes" # 194+26+4= 224 # a transposase is an integrase
# prophagegenes
Lifestyle$Prophage_genes <- "No"
prophagegenes  <- Key_table$product[grepl('proph',Key_table$product , ignore.case = TRUE)]
prophagegenes <-  prophagegenes[!prophagegenes %in% c("Prophage protein (DUF1660)")] #PROPHAGE LAMBDALM01 ANTIGEN
Lifestyle$Prophage_genes[rownames(Lifestyle) %in% Key_table_$contig[Key_table_$product %in% prophagegenes]] <- 'Yes'
Lifestyle$FINAL_LYSOGENIC[Lifestyle$Prophage_genes == "Yes"] <-  "Yes" #194+26+4+5= 229

### Recombination_lysogeny: included
Lifestyle$Recombination_lysogeny <- "No"
Lifestyle$Recombination_lysogeny[rownames(Lifestyle) %in% Key_table_$contig[Key_table_$product %in% Key_table$product[grepl('ParB|ParA;',Key_table$product , ignore.case = TRUE )]]] <- 'Yes' #194+26+4+5+2= 231
Lifestyle$FINAL_LYSOGENIC[Lifestyle$Recombination_lysogeny == "Yes"] <-  "Yes" #194+26+4+5= 229




############
library(venn)

venn = 
  list(Integrases = rownames(Lifestyle[Lifestyle$Integrase == "Yes",]),
   Repressors =  rownames(Lifestyle[Lifestyle$Repressor == "Yes",]),
   Prophage_genes = rownames(Lifestyle[Lifestyle$Prophage_genes == "Yes",]),
   Transposases = rownames(Lifestyle[Lifestyle$transposase == "Yes",]),
  Recombination_lysogeny=rownames(Lifestyle[Lifestyle$Recombination_lysogeny == "Yes",]) # 6 singletons:  protein recA, recT and ParB
) 
venn.result =
  venn(venn, ilabels = TRUE, 
       zcolor = "style", size = 25, cexil = 1.2, cexsn = 1.5);

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_Lifestyle/IGCphages_LysogenyspecificGenes_Venn.pdf",sep=""))
plot(venn.result)
dev.off()
######

#gene names
Phages_wlysogenicgenes <- rownames(Lifestyle[Lifestyle$Integrase == "No", ])
unique(Key_table_$product[Key_table_$contig %in% Phages_wlysogenicgenes  &(Key_table_$product %in% Key_table$product[grepl('lysogen',Key_table$CAT, ignore.case = T)] | Key_table_$product %in% Key_table$product[grepl('proph',Key_table$product, ignore.case = T)] | Key_table_$product %in% Key_table$product[grepl('transposase',Key_table$product, ignore.case = T)])])

write.csv(Key_table[Key_table$product %in% unique(Key_table_$product[Key_table_$contig %in% Phages_wlysogenicgenes  &(Key_table_$product %in% Key_table$product[grepl('lysogen',Key_table$CAT, ignore.case = T)] | Key_table_$product %in% Key_table$product[grepl('proph',Key_table$product, ignore.case = T)] | Key_table_$product %in% Key_table$product[grepl('transposase',Key_table$product, ignore.case = T)])]),], paste(Workdir, format(Sys.time(), "%Y-%m-%d"), "/Phage_Lifestyle/lysogenyspecificgenes.csv",sep=""))

######################
# finalise + make plots
######################
MasterTable_150$Lifestyle_LB <- 0
for (phage  in rownames(Lifestyle)){
MasterTable_150$Lifestyle_LB[rownames(MasterTable_150) == phage]  <- Lifestyle$FINAL_LYSOGENIC[rownames(Lifestyle) == phage] 
MasterTable_150$Lifestyle_LB_onlyintegraserepressor[rownames(MasterTable_150) == phage]  <- Lifestyle$FINAL_LYSOGENIC_onlyintegraserepressor[rownames(Lifestyle) == phage] 
}

MasterTable_150$Lifestyle_LB[MasterTable_150$Lifestyle_LB == 'Yes'] <- 'Lysogenic'
MasterTable_150$Lifestyle_LB[MasterTable_150$Lifestyle_LB == 'No'] <- 'No presence of Lysogenic genes'

Lifestyle$Lifestyle_LB  <- Lifestyle$FINAL_LYSOGENIC
Lifestyle$Lifestyle_LB[Lifestyle$Lifestyle_LB == 'Yes'] <- 'Lysogenic'
Lifestyle$Lifestyle_LB[Lifestyle$Lifestyle_LB == 'No'] <- 'No presence of Lysogenic genes'

Lifestyle$Lifestyle_LB  <- factor(Lifestyle$Lifestyle_LB, levels=c('No presence of Lysogenic genes','Lysogenic'))

table=Lifestyle
phages=MasterTable_150[rownames(MasterTable_150) %in% rownames(Lifestyle),]
#1. percentages in pie:

PIE <- as.data.frame(table(phages[,colnames(phages) == "Lifestyle_LB"]))
PIE$per <- PIE$Freq*100/(sum(PIE$Freq))
colnames(PIE)[1] <- "Lifestyle_LB"

p <- ggplot(PIE, aes(x=1,y=per, fill=Lifestyle_LB))+
  geom_bar(stat="identity",width = 1) + 
  coord_polar(theta = "y", start=0) + theme_void()+
 scale_fill_LB(3)+  geom_text(aes(x=1, y = (cumsum(per) - per/200), label=paste(round(per, 1), "%",sep=" ") ))+
  ggtitle(paste("Big Phages (n=", nrow(phages),")",": ","Lifestyle_LB", sep=""))

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_Lifestyle/BIGphages_","Lifestyle_LB","_PIE_general.pdf",sep=""))
print(p)
dev.off()

# FIG 1g. per time interval
### per infant

OUTPUT_INDIIVIDUAL <- as.data.frame(cbind(rownames(Lifestyle),rownames(Lifestyle)))
colnames(OUTPUT_INDIIVIDUAL) <- c('Scaffold','Scaffold_')
OUTPUT_INDIIVIDUAL[,as.character(Infants)] <- NA
for (i in Infants){

MasterTable_150_i  <-  MasterTable_150[rownames(MasterTable_150) %in% rownames(Lifestyle),]
MasterTable_150_i <- MasterTable_150_i[MasterTable_150_i[, colnames(MasterTable_150_i) == paste("Presence_r2_",i,sep="")]>0 ,  ]

for (r in rownames(MasterTable_150_i)){
Time_first  <- min(RAREFIEDREADS_$X.days[RAREFIEDREADS_[,r] >0 &  grepl(i, RAREFIEDREADS_$Sample.ID)]  , na.rm = TRUE)

if (Time_first < 60){OUTPUT_INDIIVIDUAL[OUTPUT_INDIIVIDUAL$Scaffold == r, i] <-  'm1-2'} 
else if (Time_first < 120){OUTPUT_INDIIVIDUAL[OUTPUT_INDIIVIDUAL$Scaffold == r, i] <-  'm3-4'} 
else if (Time_first < 180){OUTPUT_INDIIVIDUAL[OUTPUT_INDIIVIDUAL$Scaffold == r, i] <-  'm5-6'} 
else if (Time_first < 240){OUTPUT_INDIIVIDUAL[OUTPUT_INDIIVIDUAL$Scaffold == r, i] <-   'm7-8' } 
else if (Time_first < 300){OUTPUT_INDIIVIDUAL[OUTPUT_INDIIVIDUAL$Scaffold == r, i] <-  'm9-10' } 
else if (Time_first  >= 300){OUTPUT_INDIIVIDUAL[OUTPUT_INDIIVIDUAL$Scaffold == r, i] <-  'm11-12' } 
}
}
m="twomonths"
MONTHS_ <- as.data.frame(table(phages[,colnames(phages) == m]))
colnames(MONTHS_)[1] <- m
MONTHS_[, colnames(MONTHS_) == m] <- factor(MONTHS_[, colnames(MONTHS_) == m], levels=levels(phages[,colnames(phages) == m]))
p  <- ggplot(phages) + 
  theme_LB()  +
  scale_fill_LB(3)+
  xlab(paste("AgeBin ", m, sep=""))+
  ggtitle(paste("BIG phages (n=", nrow(phages),")",": ","Lifestyle_LB",
  sep=""))+
geom_text(data = MONTHS_, aes(x=as.factor(get(m)), y = 1.0, label = Freq), size = 4,vjust = -0.5)+
  geom_bar(aes(x=twomonths, group=Lifestyle_LB, fill=factor(Lifestyle_LB)), position="fill")

pdf(paste(Workdir,"Output_ProkaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Phage_Lifestyle/BIGphages_","Lifestyle_LB","_Bar_interval_",m,".pdf",sep=""))
print(p)
dev.off()   


CONTABLE  <- table(phages[,c(m,"Lifestyle_LB")])
as.matrix(CONTABLE)
# Fisher 
fisher.test(CONTABLE[1:2, ]) # ns
fisher.test(CONTABLE[2:3, ]) # ns
fisher.test(CONTABLE[3:4, ]) # ns
fisher.test(CONTABLE[4:5, ]) # **
fisher.test(CONTABLE[5:6, ]) # ns


fisher.test(CONTABLE[c(1,2), ]) # ns: 0.1814
fisher.test(CONTABLE[c(1,3), ]) # *: 0.04458
fisher.test(CONTABLE[c(1,4), ]) # ns: 0.6004
fisher.test(CONTABLE[c(1,5), ]) # ns: 0.1236
fisher.test(CONTABLE[c(1,6), ]) # **: 0.001043

fisher.test(CONTABLE, simulate.p.value=TRUE)

#reporttools::pairwise.fisher.test(CONTABLE, p.adjust.method = "bh")
RVAideMemoire::fisher.multcomp(CONTABLE, p.method = "BH")
# Chisquare 
chisq.test(CONTABLE)
## FIG h: analysis per infant

output_individual <- as.data.frame(cbind(Infants, Infants))
rownames(output_individual) <- Infants
colnames(output_individual) <- c("Proportion_temperate", "Proportion_lytic")
if (m == "twomonths"){
output_individual[,as.character(unique(phages[,colnames(phages) == m]))] <- NA

for (i in Infants){
phages_i <- phages[phages[,colnames(phages) == paste("Presence_r2_", i, sep="")] >0, ]
output_individual$Proportion_temperate[rownames(output_individual) == i ] <- table(phages_i$Lifestyle_LB)["Lysogenic"] / length(phages_i$Lifestyle_LB)

output_individual$Proportion_lytic[rownames(output_individual) == i ] <- table(phages_i$Lifestyle_LB)["No presence of Lysogenic genes"] / length(phages_i$Lifestyle_LB)

for (r in rownames(phages_i)){
phages_i$twomonths_i[rownames(phages_i) == r] <-  as.character(OUTPUT_INDIIVIDUAL[OUTPUT_INDIIVIDUAL$Scaffold == r, i])
}  

for (mmm in as.character(unique(phages[,colnames(phages) == m]))){

    output_individual[rownames(output_individual) == i, colnames(output_individual) == mmm ] <- table(phages_i$Lifestyle_LB[phages_i$twomonths_i == mmm])["Lysogenic"] / length(phages_i$Lifestyle_LB[phages_i$twomonths_i == mmm])
  
}

MONTHS_i <- as.data.frame(table(phages_i[,colnames(phages_i) == m]))
colnames(MONTHS_i)[1] <- m
MONTHS_i[, colnames(MONTHS_i) == m] <- factor(MONTHS_i[, colnames(MONTHS_i) == m], levels=levels(phages_i[,colnames(phages_i) == m]))

}

}

output_individual_melt <- (output_individual[grepl("-", colnames(output_individual))])
output_individual_melt$Infant <- rownames(output_individual_melt)
output_individual_melt <- melt(output_individual_melt)
output_individual_melt$variable <- factor(output_individual_melt$variable, levels=levels(phages$twomonths))

output_individual_melt$value <- as.numeric(output_individual_melt$value)
ggplot(output_individual_melt, aes(x=variable, y=value), na.rm = TRUE) + geom_boxplot(stat = "boxplot")+theme_LB() +geom_point(aes(color=Infant))+scale_color_LB_infants(8)+ylab("Proportion of Temperate phages")+xlab('Age Bin (Every two months)')

##  statistics: 
K <-   kruskal.test(output_individual_melt$value ~ as.factor(output_individual_melt$variable ))
print(paste(m, ': p-value kruskal test ', K$p.value))
pval <- K$p.value
chisquared <- as.character(K$statistic)
kruskallresult <- c(m,chisquared,pval)
kruskallresult <- rbind(kruskallresult, c('','',''))

colnames(kruskallresult) <- c("Alpha measurement","chi-squared","p-value") 

#### p-adjustement? p.adjust(K$p.value, method = "BH")
D <- as.data.frame(dunn.test(output_individual_melt$value ,as.factor(output_individual_melt$variable), method='bh'))
colnames(D) <- c('chi2','Z','P','P.adj','Comparison')

  # calculate effect size:
e <- 'variable'
freq <- as.data.frame(table(unique(output_individual_melt[,c('Infant',e)])[,e]))
for (c in D$Comparison){
N1 <- freq$Freq[freq$Var1 == word(c,1)] #
N2 <- freq$Freq[freq$Var1 == word(c,3)]
D$N[D$Comparison == c]  <- sum(N1,N2)
} #where N is the sum of the samples in the two groups compared
D$r <-  D$Z/sqrt(D$N)
D$r2 <- D$r^2



@

\section{Eukaryotic Viruses}
\subsection*{Make a Phyloseq object}
<<EV: Make phyloseq object>>=

## No Normalisation
meta.virome <- read.csv(paste(Workdir, "Data_Github/EukaryoticVirome/NoNormalisation/meta.virome.csv", sep=""), row.names=1)


meta.virome$Consistency <- as.character(meta.virome$Consistency)

OTU.virome <- read.csv(paste(Workdir, "Data_Github/EukaryoticVirome/NoNormalisation/OTU.virome.csv", sep=""), row.names=1)
colnames(OTU.virome) <- gsub('\\.','-',colnames(OTU.virome))

tax.virome <- read.csv(paste(Workdir, "Data_Github/EukaryoticVirome/NoNormalisation/tax.virome.csv", sep=""), row.names=1)

ps_virome_VIRUS_EukaryoticVirome_reads <- phyloseq(otu_table(t(OTU.virome), taxa_are_rows=T), sample_data(meta.virome), tax_table(as.matrix(tax.virome)))
ps_virome_VIRUS_EykaryoticVirome_reads_abundance <- transform_sample_counts(ps_virome_VIRUS_EukaryoticVirome_reads, function(OTU) OTU/sum(OTU))



@
\subsection*{Create output directories}
<<EV:  Create Output Directories>>=
dir.create(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/", sep=""))
dir.create(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Check/", sep=""))
dir.create(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/", sep=""))
dir.create(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", sep=""))
dir.create(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Alpha/", sep=""))

@
\subsection*{Overview of the different eukaryotic viruses present}
<<Overview of Eukaryotic  viruses detected>>=

table <- ps_virome_VIRUS_EukaryoticVirome_reads

TAB <- psmelt(table)
TAB$genus <- as.character(TAB$genus)
TAB$family <- as.character(TAB$family)
TAB$genus[TAB$genus == 0 & TAB$family == "Anelloviridae"]  <- "Anelloviridae"
TAB$genus[TAB$family ==  "Astroviridae"] <- 'Mamastrovirus'
TAB$genus[TAB$family ==  "Polyomaviridae"] <- 'Deltapolyomavirus'
TAB$family[TAB$genus ==  "Circoviridae"] <- 'Circoviridae'
TAB$family[TAB$genus ==  "Circovirus"] <- 'Circoviridae'
TAB$family[TAB$genus ==  "Genomoviridae"] <- 'Genomoviridae'
TAB$family[TAB$genus ==  "CRESS viruses"] <- 'CRESS viruses'

TAB_ <- aggregate(Abundance~superkingdom,TAB,sum)
TAB_$Percentage_Reads <-  TAB_$Abundance *100 / sum(TAB_$Abundance)
for (i in 1:nrow(TAB_)){
TAB_$NumberOfPositiveSamples[i] <- length(unique(TAB$Sample.ID[TAB$Abundance >0]))
TAB_$NumberOfPositiveInfants[i] <- length(unique(TAB$InfantID[TAB$Abundance >0]))
  }
TAB_$PercentageOfPositiveSamples <- TAB_$NumberOfPositiveSamples *100/ nsamples(table)
TAB_$PercentageOfPositiveInfants <- TAB_$NumberOfPositiveInfants *100/ 8

 write.csv(TAB_, paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/" , "EukaryoticViruses_superkingdom_Overview.csv",sep=""))

# create  subcategories 
PiV <- c('Endornaviridae','Luteoviridae','Virgaviridae','Partitiviridae','Phycodnaviridae')
FiV <- c('Totiviridae')
DaMiV <-c('Adenoviridae','Astroviridae','Parvoviridae','Picornaviridae','Caliciviridae','Reoviridae','Polyomaviridae','Herpesviridae')
CV <- c('Anelloviridae','Circoviridae','Genomoviridae','CRESS viruses')

TAB$Category <- as.character('')
TAB$Category[TAB$family %in% PiV] <-  'Plant infecting'
TAB$Category[TAB$family %in% FiV] <-  'Fungi infecting'
TAB$Category[TAB$family %in% DaMiV] <-  'Human infecting'
TAB$Category[TAB$family %in% CV] <-  'Small Circular ssDNA viruses'

# create a table with DaMiV positive samples and abundance per family 
DAMIV2 <- aggregate(Abundance~genus+family+Sample.ID+X.days+InfantID,TAB[TAB$Category == "Human infecting",],sum)
unique(DAMIV2$Sample.ID[DAMIV2$family == "Reoviridae" & DAMIV2$Abundance > 0 & (DAMIV2$X.days < min(VACC$X.days) | DAMIV2$X.days > (max(VACC$X.days))+21 ) ])
DAMIV2$genus <- as.character(DAMIV2$genus)
DAMIV2$genus[!DAMIV2$Sample.ID %in% unique(DAMIV2$Sample.ID[DAMIV2$family == "Reoviridae" & DAMIV2$Abundance > 0 & (DAMIV2$X.days < min(VACC$X.days) | DAMIV2$X.days > (max(VACC$X.days))+21 ) ]) & DAMIV2$family == "Reoviridae"] <- "Rotavirus: Vaccine"
DAMIV2 <- DAMIV2[!DAMIV2$genus == "Rotavirus: Vaccine",]
DAMIV2 <- aggregate(Abundance~Sample.ID+X.days+InfantID+family,DAMIV2,sum)

# create a table with DaMiV positive samples 
DAMIV <- aggregate(Abundance~genus+family+Sample.ID+X.days+InfantID,TAB[TAB$Category == "Human infecting",],sum)
unique(DAMIV$Sample.ID[DAMIV$family == "Reoviridae" & DAMIV$Abundance > 0 & (DAMIV$X.days < min(VACC$X.days) | DAMIV$X.days > (max(VACC$X.days))+21 ) ])
DAMIV$genus <- as.character(DAMIV$genus)
DAMIV$genus[!DAMIV$Sample.ID %in% unique(DAMIV$Sample.ID[DAMIV$family == "Reoviridae" & DAMIV$Abundance > 0 & (DAMIV$X.days < min(VACC$X.days) | DAMIV$X.days > (max(VACC$X.days))+21 ) ]) & DAMIV$family == "Reoviridae"] <- "Rotavirus: Vaccine"
DAMIV <- DAMIV[!DAMIV$genus == "Rotavirus: Vaccine",]
DAMIV <- aggregate(Abundance~Sample.ID+X.days+InfantID,DAMIV,sum)

#  family level  table = TABLE1  in  manuscript
TAB_ <- aggregate(Abundance~family+Category,TAB,sum)
TAB_$Percentage_Reads <-  TAB_$Abundance *100 / sum(TAB_$Abundance)
for (i in 1:nrow(TAB_)){
TAB_$NumberOfPositiveSamples[i] <- length(unique(TAB$Sample.ID[TAB$family  == TAB_$family[i] & TAB$Abundance >0]))
TAB_$NumberOfPositiveInfants[i] <- length(unique(TAB$InfantID[TAB$family  == TAB_$family[i]  & TAB$Abundance >0]))
  }
TAB_$PercentageOfPositiveSamples <- TAB_$NumberOfPositiveSamples *100/ nsamples(table)
TAB_$PercentageOfPositiveInfants <- TAB_$NumberOfPositiveInfants *100/ 8

write.csv(TAB_, paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/" , "EukaryoticViruses_families_Overview.csv",sep=""))
# Create some plots
test <- aggregate(Abundance~family+Category+Sample.ID+InfantID+X.days,TAB,sum)
test$Presence[test$Abundance <1 ] <- 0.0
test$Presence[test$Abundance >0 ] <- 1
test$family <- factor(test$family, levels= unique(test$family[order(test$Category,test$family)]))


Aa <- ggplot(test, aes(x=X.days, y=family, fill= family, color=family, alpha=Presence))+
  geom_point(size=2.5)+
  scale_color_LB(length(unique(test$family)))+
  theme_LB()+
  theme(legend.position="none")+
  xlab('Days After Birth')+
  ylab('Eukaryotic Viral Family')+
  facet_wrap(~InfantID, nrow=2)+ 
  geom_vline(size=0.5, data = vaccc, mapping = aes(xintercept = X.days), colour = "black")+
  geom_vline(size=1, data = dcc, mapping = aes(xintercept = X.days), colour = "red")+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-1*(max(test$Presence)/2.5),yend=-1*(max(test$Presence)/2.5)), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-3*(max(test$Presence)/2.5),yend=-3*(max(test$Presence)/2.5)), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-4*(max(test$Presence)/2.5),yend=-4*(max(test$Presence)/2.5)), color="Darkolivegreen2",inherit.aes = F)

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    Aa <- Aa + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-2*(max(test$Presence)/2.5),yend=-2*(max(test$Presence)/2.5)), color="Deepskyblue3",inherit.aes = F)
    }

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/" , "OverviewFamilies_presencesamples.pdf",sep=""), width=8, height=8)
plot(Aa)
dev.off()

## Pie Plots
# A. per category
CAT <- ggplot(aggregate(Abundance~Category,TAB,sum), aes(x = "", y=Abundance, fill = Category)) + geom_bar(stat = "identity", width = 1) + coord_polar(theta="y") + theme_LB() + scale_fill_LB(4)+ theme(axis.text.x=element_blank())
# percentages 
TEXT <- aggregate(Abundance~Category,TAB,sum)
TEXT$percentage <- TEXT$Abundance *100 / sum(TEXT$Abundance)
write.csv(TEXT,paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/", "Pie_categories_percentages.csv",sep=""))
pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/", "_Pie_categories.pdf",sep=""))
print(CAT)
dev.off()
# B. per family
FAM <- ggplot(aggregate(Abundance~family,TAB[TAB$Category == 'Human infecting',],sum), aes(x = "", y=Abundance, fill = family)) + geom_bar(stat = "identity", width = 1) + coord_polar(theta="y") + theme_LB() + scale_fill_LB(length(unique(TAB$family[TAB$Category == 'Human infecting'])))+ theme(axis.text.x=element_blank())
# percentages 
TEXT <- aggregate(Abundance~family,TAB[TAB$Category == 'Human infecting',],sum)
TEXT$percentage <- TEXT$Abundance *100 / sum(TEXT$Abundance)
pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/" ,"Pie_families.pdf",sep=""))
print(FAM)
dev.off()
write.csv(TEXT,paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/", "Pie_families_percentages.csv",sep=""))


#  family+genus
TAB_ <- aggregate(Abundance~genus+family+Category,TAB,sum)
TAB_$Percentage_Reads <-  TAB_$Abundance *100 / sum(TAB_$Abundance)
for (i in 1:nrow(TAB_)){
TAB_$NumberOfPositiveSamples[i] <- length(unique(TAB$Sample.ID[TAB$family  == TAB_$family[i] & TAB$genus == TAB_$genus[i] & TAB$Abundance >0]))
TAB_$NumberOfPositiveInfants[i] <- length(unique(TAB$InfantID[TAB$family  == TAB_$family[i] & TAB$genus == TAB_$genus[i] & TAB$Abundance >0]))
TAB_$NumberOfContigs[i] <- length(unique(TAB$OTU[TAB$family  == TAB_$family[i] & TAB$genus == TAB_$genus[i] & TAB$Abundance >0]))

}
TAB_$PercentageOfPositiveSamples <- TAB_$NumberOfPositiveSamples *100/ nsamples(table)
TAB_$PercentageOfPositiveInfants <- TAB_$NumberOfPositiveInfants *100/ 8

 write.csv(TAB_, paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/","OverviewGenera.csv",sep=""))

@
<<Overview of Anneloviruses detected>>=
table <- ps_virome_VIRUS_EukaryoticVirome_reads

TAB <- psmelt(table)
TAB$genus <- as.character(TAB$genus)
TAB$family <- as.character(TAB$family)

TAB$genus[TAB$genus == 0 & TAB$family == "Anelloviridae"]  <- "Anelloviridae"

TAB_anello <- TAB[TAB$family == "Anelloviridae",]

TAB_anello_ <- aggregate(Abundance~OTU,TAB_anello,sum)
TAB_anello_$Percentage_Reads <-  TAB_anello_$Abundance *100 / sum(TAB_anello_$Abundance)
for (i in 1:nrow(TAB_anello_)){
TAB_anello_$NumberOfPositiveSamples[i] <- length(unique(TAB_anello$Sample.ID[TAB_anello$OTU  == TAB_anello_$OTU[i] & TAB_anello$Abundance >0]))
TAB_anello_$NumberOfPositiveInfants[i] <- length(unique(TAB_anello$InfantID[TAB_anello$OTU  == TAB_anello_$OTU[i]  & TAB_anello$Abundance >0]))
  }
TAB_anello_$PercentageOfPositiveSamples <- TAB_anello_$NumberOfPositiveSamples *100/ nsamples(table)
TAB_anello_$PercentageOfPositiveInfants <- TAB_anello_$NumberOfPositiveInfants *100/ 8

table(TAB_anello_$PercentageOfPositiveInfants)
table(TAB_anello_$PercentageOfPositiveSamples )

write.csv(TAB_anello_, paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/" ,"OverviewAnelloviridaeContigs.csv",sep=""))

bar <- ggplot(TAB_anello_, aes(x=NumberOfPositiveInfants))+geom_bar(fill=PAL_LB[4])+theme_LB()+
  ylab("Number of Anelloviridae Contigs") +  
geom_text(stat='count',aes(label=..count..),vjust=-1)

pdf( paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/" ,"OverviewAnelloviridaeContigs_perinfant_barplot.pdf",sep=""))
plot(bar)
dev.off()


@
\subsection*{Duration of the detection of the different viruses}
<<Duration of infection>>=
# hard to count
TABLE <- ps_virome_VIRUS_EukaryoticVirome_reads
# for DaMiVs: at infection level
TABLE_melt <- psmelt(TABLE %>% tax_glom(.,taxrank = "infection"))
TABLE_melt <- TABLE_melt[TABLE_melt$family %in% get("DaMiV"),]
unique(TABLE_melt$Sample.ID[TABLE_melt$family == "Reoviridae" & TABLE_melt$Abundance > 0 & (TABLE_melt$X.days < min(VACC$X.days) | TABLE_melt$X.days > (max(VACC$X.days))+21 ) ])
TABLE_melt$infection <- as.character(TABLE_melt$infection)
TABLE_melt$infection[!TABLE_melt$Sample.ID %in% unique(TABLE_melt$Sample.ID[TABLE_melt$family == "Reoviridae" & TABLE_melt$Abundance > 0 & (TABLE_melt$X.days < min(VACC$X.days) | TABLE_melt$X.days > (max(VACC$X.days))+21 ) ]) & TABLE_melt$family == "Reoviridae"] <- "Rotavirus A: Vaccine"
TABLE_melt <- TABLE_melt[!TABLE_melt$infection == "Rotavirus A: Vaccine",]
TABLE_melt$Abundance_presence <- 0
TABLE_melt$Abundance_presence[TABLE_melt$Abundance > 0] <- 1


Table_result_a <- as.data.frame(cbind(as.character(Infants),Infants))
colnames(Table_result_a) <- c('InfantID','NumberOfInfections')
Table_result_a$NumberOfInfections <- as.character(c(""))
Table_result_c <- c()

for (i  in Infants){
Table_result_a$NumberOfInfections[Table_result_a$InfantID ==i] <- length(unique(TABLE_melt$infection[TABLE_melt$Abundance >0 & TABLE_melt$InfantID == i]))
Table_result_b <- as.data.frame(cbind(as.character(unique(TABLE_melt$infection[TABLE_melt$Abundance >0 & TABLE_melt$InfantID == i])),unique(TABLE_melt$infection[TABLE_melt$Abundance >0 & TABLE_melt$InfantID == i])))
colnames(Table_result_b) <- c('InfantID','infection')
Table_result_b$InfantID <- i
Table_result_b$Duration  <- as.character(c(''))
for(c in  unique(TABLE_melt$infection[TABLE_melt$Abundance >0 & TABLE_melt$InfantID == i])){
min <- min(TABLE_melt$X.days[TABLE_melt$Abundance >0 & TABLE_melt$InfantID == i & TABLE_melt$infection ==c])
max <- max(TABLE_melt$X.days[TABLE_melt$Abundance >0 & TABLE_melt$InfantID == i & TABLE_melt$infection ==c])
Table_result_b$Duration[Table_result_b$InfantID ==i & Table_result_b$infection  ==  c]  <-  max -  min
Table_result_b$Duration  <- as.numeric(Table_result_b$Duration)
}  
Table_result_c <- rbind(Table_result_c,Table_result_b)
}

## of al counted DaMiv infections:
Table_result_c <- Table_result_c[order(Table_result_c$Duration),]
nrow(Table_result_c)
# only present for one sample:
nrow(Table_result_c[Table_result_c$Duration == 0,])
nrow(Table_result_c[Table_result_c$Duration >0 &Table_result_c$Duration <= 7,])
nrow(Table_result_c[Table_result_c$Duration >7 &Table_result_c$Duration <= 30,])
# 16 infections are present for longer than a month
Table_result_c[Table_result_c$Duration > 30,]
# !! manually check if durations are  correctly  calculated --> We only want to count SUBSECUTIVE SAMPLES
Table_result_c$Duration[Table_result_c$InfantID == "S003" & Table_result_c$infection == "Parechovirus Ae" ] <- 0

Table_result_c$Duration[Table_result_c$InfantID == "S004" & Table_result_c$infection == "Rotavirus A" ] <- 14-1  # exlcude day 361
Table_result_c$Duration[Table_result_c$InfantID == "S004" & Table_result_c$infection == "Primate bocaparvovirus 2" ]<- 269-133  # exlcude day 395
Table_result_c$Duration[Table_result_c$InfantID == "S004" & Table_result_c$infection == "Parechovirus Ae" ]<- 269-135 # exlcude day 395


Table_result_c$Duration[Table_result_c$InfantID == "S005" & Table_result_c$infection == "Aichivirus A" ]<- 299-240 # exlcude day 360
Table_result_c$Duration[Table_result_c$InfantID == "S006" & Table_result_c$infection == "Human mastadenovirus C"]<- 0 
Table_result_c$Duration[Table_result_c$InfantID == "S006" & Table_result_c$infection == "Enterovirus Ad"]<-151-87
Table_result_c$Duration[Table_result_c$InfantID == "S007" & Table_result_c$infection == "Enterovirus Ab"]- 316-273

# for Anello's at contig level
##############
TABLE_melt_a <- psmelt(TABLE)
TABLE_melt_a <- TABLE_melt_a[TABLE_melt_a$family=="Anelloviridae",]

Table_result_a <- as.data.frame(cbind(as.character(Infants),Infants))
colnames(Table_result_a) <- c('InfantID','NumberOfAnelloContigs')
Table_result_a$NumberOfAnelloContigs <- as.character(c(""))
Table_result_c <- c()
for (i  in Infants){
Table_result_a$NumberOfAnelloContigs[Table_result_a$InfantID ==i] <- length(unique(TABLE_melt_a$OTU[TABLE_melt_a$Abundance >0 & TABLE_melt_a$InfantID == i]))
Table_result_b <- as.data.frame(cbind(as.character(unique(TABLE_melt_a$OTU[TABLE_melt_a$Abundance >0 & TABLE_melt_a$InfantID == i])),unique(TABLE_melt_a$OTU[TABLE_melt_a$Abundance >0 & TABLE_melt_a$InfantID == i])))
colnames(Table_result_b) <- c('InfantID','OTU')
Table_result_b$InfantID <- i
Table_result_b$Duration  <- as.character(c(''))
for(c in  unique(TABLE_melt_a$OTU[TABLE_melt_a$Abundance >0 & TABLE_melt_a$InfantID == i])){
min <- min(TABLE_melt_a$X.days[TABLE_melt_a$Abundance >0 & TABLE_melt_a$InfantID == i & TABLE_melt_a$OTU ==c])
max <- max(TABLE_melt_a$X.days[TABLE_melt_a$Abundance >0 & TABLE_melt_a$InfantID == i & TABLE_melt_a$OTU ==c])
Table_result_b$Duration[Table_result_b$InfantID ==i & Table_result_b$OTU  ==  c]  <-  max -  min
Table_result_b$Duration  <- as.numeric(Table_result_b$Duration)
}  
Table_result_c <- rbind(Table_result_c,Table_result_b)
}
Table_result_cc <- dcast(Table_result_c, OTU ~ InfantID, value.var="Duration")
Table_result_cc[is.na(Table_result_cc)]  <-  -1 # absent in infant
for (otus in Table_result_cc$OTU){
TAB_anello_$LongestDuration[TAB_anello_$OTU  == otus] <-  max(Table_result_cc[Table_result_cc$OTU==otus,colnames(Table_result_cc) %in% Infants])
}
TAB_anello_$LongestDuration[is.na(TAB_anello_$LongestDuration)] <- 0
summary(TAB_anello_$LongestDuration)
dim(TAB_anello_[!is.na(TAB_anello_$LongestDuration),])
TAB_anello_ <- TAB_anello_[order(TAB_anello_$LongestDuration),]
Table_result_a$NumberOfAnelloContigs <- as.numeric(Table_result_a$NumberOfAnelloContigs)  
@
\subsection*{Accumulation of the viruses}
<<Cummulative increase in eukaryotic viruses per child >>=
### taxonomic subgroups
# Disease-associated mammal Infecting Viruses
DaMiV 
# Circular Viruses
CV_onlyAnelloviridae <- c('Anelloviridae')

Subgroups <- c('DaMiV_novaccine','CV_onlyAnelloviridae')
Subgroups_names <- c('Disease-associated Mammal infecting viruses: No Vaccine','Anelloviridae')

for (subg in Subgroups) { #  change to for anelloviruses 2
  print(subg)
  if(subg ==  "DaMiV_novaccine"){
    subl="infection"
    TABLE_ <- ps_virome_VIRUS_EukaryoticVirome_reads
    tax_table(TABLE_)[,'species']<- tax_table(TABLE_)[,'infection']
    TABLE_melt <- psmelt(TABLE_ %>% tax_glom(.,taxrank = "species"))
    TABLE_melt$infection <- TABLE_melt$species
    TABLE_melt <- TABLE_melt[TABLE_melt$family %in% get("DaMiV"),]
#unique(TABLE_melt$Sample.ID[TABLE_melt$family == "Reoviridae" & TABLE_melt$Abundance > 0 & (TABLE_melt$X.days < min(VACC$X.days) | TABLE_melt$X.days > (max(VACC$X.days))+21 ) ])

TABLE_melt$species <- as.character(TABLE_melt$species)

TABLE_melt$species[!TABLE_melt$Sample.ID %in% unique(TABLE_melt$Sample.ID[TABLE_melt$family == "Reoviridae" & TABLE_melt$Abundance > 0 & (TABLE_melt$X.days < min(VACC$X.days) | TABLE_melt$X.days > (max(VACC$X.days))+21 ) ]) & TABLE_melt$family == "Reoviridae"] <- "Rotavirus A: Vaccine"
TABLE_melt <- TABLE_melt[!TABLE_melt$species == "Rotavirus A: Vaccine",]

  }
  if(subg ==  "CV_onlyAnelloviridae"){
    subl="contig"
    TABLE_melt <- psmelt(ps_virome_VIRUS_EukaryoticVirome_reads)
    TABLE_melt <- TABLE_melt[TABLE_melt$family == "Anelloviridae",]
  }
  
    ## Calculate cummulative  sum  + create  plot
print(unique(TABLE_melt$family))
  
TABLE_melt$Abundance_presence <- TABLE_melt$Abundance
TABLE_melt$Abundance_presence[TABLE_melt$Abundance > 0] <- 1
TABLE_melt <- TABLE_melt[order(TABLE_melt$InfantID, TABLE_melt$X.days),]
TABLE_melt$csum <- ave(TABLE_melt$Abundance_presence, TABLE_melt$InfantID, FUN=cumsum)

MyGraphData <- TABLE_melt %>% group_by(InfantID) %>% mutate(cumsum = cumsum(Abundance_presence))

A <- ggplot(data=MyGraphData, aes(y=cumsum, x=X.days, color=InfantID)) + geom_line(size=1.5) + theme_LB() + scale_color_LB_infants(8) + 
  ggtitle(paste("Cumsum, Eukaryotic Viruses @ ", subl , " level","
Subgroup: ", Subgroups_names[which(Subgroups == subg)], sep=""))+
  xlab('Days After Birth')

TABLE_melt_unique <- TABLE_melt[!TABLE_melt$Abundance ==0,]
TABLE_melt_unique$cs_eff <- with(TABLE_melt_unique, ave(Abundance_presence,  InfantID, OTU, FUN = function(x) c(x[1], diff(x)) ))
TABLE_melt_unique$CumSum_unique <- with(TABLE_melt_unique, ave(cs_eff, InfantID, FUN = cumsum))
  MissingSamples <- unique(TABLE_melt$Sample.ID[!TABLE_melt$Sample.ID %in% TABLE_melt_unique$Sample.ID])
  NotMissingSamples <- unique(TABLE_melt$Sample.ID[TABLE_melt$Sample.ID %in% TABLE_melt_unique$Sample.ID])

for (i in Infants){
  MissingSamples_i <- MissingSamples[grepl(i, MissingSamples)]
  NotMissingSamples_i <-   NotMissingSamples[grepl(i, NotMissingSamples)]

for (missing  in MissingSamples_i){
closest_before <- rev(unique(TABLE_melt$Sample.ID[TABLE_melt$Sample.ID %in% NotMissingSamples_i &
                                         TABLE_melt$X.days < unique(TABLE_melt$X.days[TABLE_melt$Sample.ID == missing])]))[1]

  if (!is.na(closest_before)) {
    TABLE_melt_unique <- TABLE_melt_unique %>% add_row(
    Sample.ID = missing, 
    X.days =  unique(TABLE_melt$X.days[TABLE_melt$Sample.ID == missing]),
    DC=unique(TABLE_melt$DC[TABLE_melt$Sample.ID == missing]),
    Breast=unique(TABLE_melt$Breast[TABLE_melt$Sample.ID == missing]),
    Formula=unique(TABLE_melt$Formula[TABLE_melt$Sample.ID == missing]),
    Vegetables=unique(TABLE_melt$Vegetables[TABLE_melt$Sample.ID == missing]),
    Fruit=unique(TABLE_melt$Fruit[TABLE_melt$Sample.ID == missing]),
    CumSum_unique = max((unique(TABLE_melt_unique$CumSum_unique[TABLE_melt_unique$Sample.ID == closest_before]))) ,
    InfantID = i)
  } 
  if (is.na(closest_before)) {
    TABLE_melt_unique <- TABLE_melt_unique %>% add_row(
    Sample.ID = missing, 
    X.days =  unique(TABLE_melt$X.days[TABLE_melt$Sample.ID == missing]),
    DC=unique(TABLE_melt$DC[TABLE_melt$Sample.ID == missing]),
    Breast=unique(TABLE_melt$Breast[TABLE_melt$Sample.ID == missing]),
    Formula=unique(TABLE_melt$Formula[TABLE_melt$Sample.ID == missing]),
    Vegetables=unique(TABLE_melt$Vegetables[TABLE_melt$Sample.ID == missing]),
    Fruit=unique(TABLE_melt$Fruit[TABLE_melt$Sample.ID == missing]),

    CumSum_unique = 0,
    InfantID = i)
  } 
}
TABLE_melt_unique <- TABLE_melt_unique[order(TABLE_melt_unique$X.days),]
  }
  
B<- ggplot(data=TABLE_melt_unique, aes(y=CumSum_unique, x=X.days, color=InfantID)) + geom_line(size=1.5) + theme_LB() + scale_color_LB_infants(8)  +
 ggtitle(paste("Cumsum UNIQUE, Eukaryotic Viruses @ ", subl , " level","
Subgroup: ", Subgroups_names[which(Subgroups == subg)], sep=""))+
  xlab('Days After Birth')

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_",subg,"_",subl,".pdf",sep="")) 
print(grid.arrange(A,B))
dev.off()    

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_notunique_nof_",subg,"_",subl,".pdf",sep="")) 
print(A)
dev.off()    

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_unique_nof_",subg,"_",subl,".pdf",sep="")) 
print(B)
dev.off()    

# link to metadata
Aa <- A + facet_wrap("InfantID", ncol=4) + 
  geom_vline(size=0.5, data = vaccc, mapping = aes(xintercept = X.days), colour = "black")+
  geom_vline(size=1, data = dcc, mapping = aes(xintercept = X.days), colour = "red")+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-1*(max(TABLE_melt$csum)/25),yend=-1*(max(TABLE_melt$csum)/25)), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-3*(max(TABLE_melt$csum)/25),yend=-3*(max(TABLE_melt$csum)/25)), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-4*(max(TABLE_melt$csum)/25),yend=-4*(max(TABLE_melt$csum)/25)), color="Darkolivegreen2",inherit.aes = F)+
geom_point(aes(x=X.days, y=0), size=1)

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    Aa <- Aa + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-2*(max(TABLE_melt$csum)/25),yend=-2*(max(TABLE_melt$csum)/25)), color="Deepskyblue3",inherit.aes = F)
    }
    
    
pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_all_",subg,"_",subl,".pdf",sep=""), width=10, height=5) 
plot(Aa)
dev.off()

Bb <- B + facet_wrap("InfantID", ncol=4) + 
  geom_vline(size=0.5, data = vaccc, mapping = aes(xintercept = X.days), colour = "black")+
  geom_vline(size=1, data = dcc, mapping = aes(xintercept = X.days), colour = "red")+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-1*(max(TABLE_melt$csum)/25),yend=-1*(max(TABLE_melt$csum)/25)), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-3*(max(TABLE_melt$csum)/25),yend=-3*(max(TABLE_melt$csum)/25)), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-4*(max(TABLE_melt$csum)/25),yend=-4*(max(TABLE_melt$csum)/25)), color="Darkolivegreen2",inherit.aes = F)+
geom_point(aes(x=X.days, y=0), size=1)

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    Bb <- Bb + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-2*(max(TABLE_melt$csum)/25),yend=-2*(max(TABLE_melt$csum)/25)), color="Deepskyblue3",inherit.aes = F)
    }

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_unique_",subg,"_",subl,".pdf",sep=""), width=10, height=5) 
plot(Bb)
dev.off()
# check  some  specific events

events  <- c('DC','Breast','Fruit','Formula','Vegetables','Halfyear')
events_colors <-  c('orange','Deepskyblue4','Darkolivegreen2','Deepskyblue2','Darkolivegreen4','yellow')
TABLE_melt$Halfyear[TABLE_melt$X.days <= 180] <- 'N' 
TABLE_melt$Halfyear[TABLE_melt$X.days > 180] <- 'Y' 
TABLE_melt_unique$Halfyear[TABLE_melt_unique$X.days <= 180] <- 'N' 
TABLE_melt_unique$Halfyear[TABLE_melt_unique$X.days > 180] <- 'Y' 

OUTPUT <- list()
OUTPUT_STATS_PAIRED <- list()
for (e in events){
# cumsum normal
  TABLE_melt_max <- c('InfantID','event','Y_N','csum_event')
for (i in Infants){
max_Y <-  max(TABLE_melt$csum[TABLE_melt$InfantID == i & TABLE_melt[,colnames(TABLE_melt) == e] == "Y"])
time_Y <- max(TABLE_melt$X.days[TABLE_melt$InfantID == i & TABLE_melt$csum == max_Y &  TABLE_melt[,colnames(TABLE_melt) == e] == "Y"] )

max_N <- max(TABLE_melt$csum[TABLE_melt$InfantID == i & TABLE_melt[,colnames(TABLE_melt) == e] == "N"])
time_N <- max(TABLE_melt$X.days[TABLE_melt$InfantID == i & TABLE_melt$csum == max_N &  TABLE_melt[,colnames(TABLE_melt) == e] == "N"] )

if (time_Y > time_N){
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'N',max_N))
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'Y',max_Y - max_N))
}
if (time_N > time_Y){
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'N',max_N-max_Y))
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'Y',max_Y))
}

}
  
TABLE_melt_max <- as.data.frame(TABLE_melt_max)
colnames(TABLE_melt_max) <-  c('InfantID','event','Y_N','csum_event')
TABLE_melt_max <- TABLE_melt_max[grepl('S0',TABLE_melt_max$InfantID),]
TABLE_melt_max$csum_event <- as.numeric(as.character(TABLE_melt_max$csum_event))
TABLE_melt_max$Y_N <- as.character(TABLE_melt_max$Y_N)

ee <- ggplot(TABLE_melt_max, aes(x=Y_N,y=csum_event, fill=event, alpha=Y_N))+
  geom_boxplot()+
  geom_point()+
  geom_line(aes(group = InfantID)) +
  theme_LB()+ 
  scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors[which(events == e)])+
  theme(legend.position = "none")+
  xlab(paste(e,sep=""))+
  ylab(paste("CumSum per interval",sep=""))

stat.test <- as.data.frame( TABLE_melt_max  %>%
  wilcox_test(csum_event ~ Y_N, paired = FALSE) %>%
  add_significance())
stat.test$effectsize <- (TABLE_melt_max %>%  wilcox_effsize(csum_event ~ Y_N, paired = FALSE))$effsize
stat.test_paired <- as.data.frame( TABLE_melt_max  %>%
  wilcox_test(csum_event ~ Y_N, paired = TRUE) %>%
  add_significance())
stat.test_paired$effectsize <- (TABLE_melt_max %>%  wilcox_effsize(csum_event ~ Y_N, paired = TRUE))$effsize

ee <-   ee+ ggtitle(paste("Cumsum, Eukaryotic Viruses @ ", subl , " level","
Subgroup: ", Subgroups_names[which(Subgroups == subg)],'
Wilcoxontest p: ',wilcox.test(csum_event~Y_N, TABLE_melt_max)$p.value,"+  Effect size: ", stat.test$effectsize, '
Paired Wilcoxontest p: ',wilcox.test(csum_event~Y_N, TABLE_melt_max,paired=T)$p.value,"+  Effect size: ",stat.test_paired$effectsize, sep="")) 


pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_all_boxplot_",e,'_', subg,"_",subl,".pdf",sep="")) 
plot(ee)
dev.off()

# cumsum unique
  TABLE_melt_unique_max <- c('InfantID','event','Y_N','CumSum_unique_event')
for (i in Infants){
max_Y <-  max(TABLE_melt_unique$CumSum_unique[TABLE_melt_unique$InfantID == i & TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "Y"])
time_Y <- max(TABLE_melt_unique$X.days[TABLE_melt_unique$InfantID == i & TABLE_melt_unique$CumSum_unique == max_Y &  TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "Y"] )
max_N <- max(TABLE_melt_unique$CumSum_unique[TABLE_melt_unique$InfantID == i & TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "N"])
time_N <- max(TABLE_melt_unique$X.days[TABLE_melt_unique$InfantID == i & TABLE_melt_unique$CumSum_unique == max_N &  TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "N"] )

if (time_Y > time_N){
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'N',max_N))
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'Y',max_Y - max_N))
}
if (time_N > time_Y){
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'N',max_N-max_Y))
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'Y',max_Y))
}

}
TABLE_melt_unique_max <- as.data.frame(TABLE_melt_unique_max)
colnames(TABLE_melt_unique_max) <-  c('InfantID','event','Y_N','CumSum_unique_event')
TABLE_melt_unique_max <- TABLE_melt_unique_max[grepl('S0',TABLE_melt_unique_max$InfantID),]
TABLE_melt_unique_max$CumSum_unique_event <- as.numeric(as.character(TABLE_melt_unique_max$CumSum_unique_event))
TABLE_melt_unique_max$Y_N <- as.character(TABLE_melt_unique_max$Y_N)
ee <- ggplot(TABLE_melt_unique_max, aes(x=Y_N,y=CumSum_unique_event, alpha=Y_N, fill=event))+
  geom_boxplot()+
   geom_point()+
  geom_line(aes(group = InfantID)) +
 
  theme_LB()+   
  scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors[which(events == e)])+
  theme(legend.position = "none")+
  xlab(paste(e,sep=""))+
   ylab(paste("Unique CumSum per interval",sep=""))


library(rstatix)
stat.unique_test <- as.data.frame( TABLE_melt_unique_max  %>%
  wilcox_test(CumSum_unique_event ~ Y_N, paired = FALSE) %>%
  add_significance())
stat.unique_test$effectsize <- (TABLE_melt_unique_max %>%  wilcox_effsize(CumSum_unique_event ~ Y_N, paired = FALSE))$effsize
stat.unique_test_paired <- as.data.frame( TABLE_melt_unique_max  %>%
  wilcox_test(CumSum_unique_event ~ Y_N, paired = TRUE) %>%
  add_significance())
stat.unique_test_paired$effectsize <- (TABLE_melt_unique_max %>%  wilcox_effsize(CumSum_unique_event ~ Y_N, paired = TRUE))$effsize

ee <-   ee+ ggtitle(paste("Unique Cumsum, Eukaryotic Viruses @ ", subl , " level","
Subgroup: ", Subgroups_names[which(Subgroups == subg)],'
Wilcoxontest p: ',wilcox.test(CumSum_unique_event~Y_N, TABLE_melt_unique_max)$p.value,"+  Effect size: ", stat.unique_test$effectsize, '
Paired Wilcoxontest p: ',wilcox.test(CumSum_unique_event~Y_N, TABLE_melt_unique_max,paired=T)$p.value,"+  Effect size: ",stat.unique_test_paired$effectsize, sep="")) 





pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_all_boxplot_",e,'_', subg,"_",subl,".pdf",sep="")) 
plot(ee)
dev.off()
  OUTPUT[[which(events == e)]] <- as.data.frame(merge(TABLE_melt_max, TABLE_melt_unique_max,  by=c('InfantID','event','Y_N')) )
  stats  <- as.data.frame(rbind(stat.test_paired, stat.unique_test_paired) )
  stats$event <- e
  OUTPUT_STATS_PAIRED[[which(events == e)]] <- stats
}
output <- do.call(rbind,OUTPUT)

write.csv(output,  paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_OUTPUT_events_",e,'_', subg,"_",subl,".csv",sep="")) 

output_stats_paired <- do.call(rbind,OUTPUT_STATS_PAIRED)
output_stats_paired$p_adjustedFDR <- ''
for (variable in unique(output_stats_paired$.y. )){
  output_stats_paired$p_adjustedFDR[output_stats_paired$.y. == variable] <- p.adjust( output_stats_paired$p[output_stats_paired$.y. == variable], method = 'BH')

}

write.csv(output_stats_paired, paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_OUTPUT_stats_paired_events_", subg,"_",subl,".csv",sep="")) 

output_ <- melt(output, id.vars=c('InfantID','event','Y_N'))
output_$variable <- as.character(output_$variable)
output_$variable[output_$variable == 'CumSum_unique_event'] <- "UniqueCumSum" 
output_$variable[output_$variable == 'csum_event'] <- "CumSum" 

zz <- ggplot(output_, aes(x=Y_N,y=value, fill=event, alpha=Y_N))+
  geom_boxplot()+
  geom_point()+
  geom_line(aes(group=InfantID))+
  theme_LB()+ 
  facet_grid(variable~event, scales = 'free') +
    scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors)+
  theme(legend.position = "none")+
    ylab(paste("CumSum per interval",sep=""))

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_boxplot_ALL_events_", subg,"_",subl,".pdf",sep="")) 
plot(zz)
dev.off()

zzx <- ggplot(output_[output_$variable == "CumSum", ], aes(x=Y_N,y=value, fill=event, alpha=Y_N))+
  geom_boxplot()+
  geom_point()+
  geom_line(aes(group=InfantID))+
  theme_LB()+ 
  facet_grid(~event, scales = 'free') +
    scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors)+
  theme(legend.position = "none")+
    ylab(paste("CumSum per interval",sep=""))

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_boxplot_ALL_events_cumsum_", subg,"_",subl,".pdf",sep=""), width=10, height=3) 
plot(zzx)
dev.off()

zzx <- ggplot(output_[output_$variable == "UniqueCumSum", ], aes(x=Y_N,y=value, fill=event, alpha=Y_N))+
  geom_boxplot()+
  geom_point()+
  geom_line(aes(group=InfantID))+
  theme_LB()+ 
  facet_grid(~event, scales = 'free') +
    scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors)+
  theme(legend.position = "none")+
    ylab(paste("Unique CumSum per interval",sep=""))

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_boxplot_ALL_events_cumsum_unique", subg,"_",subl,".pdf",sep=""), width=10, height=3) 
plot(zzx)
dev.off()
# which DaMiv Infection don't have enteric  symptoms=
if (subg == "DaMiV_novaccine"){
  
## define symptomatic infection as = an infection for which an enteric symptom (i.e. diarrhoea or vomitting) is observed within seven days after the start of the infection
ENTERICINFECTION <- TABLE_melt_unique[TABLE_melt_unique$cs_eff == 1 & !is.na(TABLE_melt_unique$cs_eff),]
ENTERICINFECTION$EntericSigns <- "No"
TABLE_melt_unique$EntericSigns <- "No"
ENTERICINFECTION$Number <-  1:nrow(ENTERICINFECTION)
for (infec in 1:nrow(ENTERICINFECTION)){
# enteric symptoms
# within 7 days after the start?
Virus=ENTERICINFECTION$infection[infec]
Start=ENTERICINFECTION$X.days[infec]
End=Start+7
Infant=ENTERICINFECTION$InfantID[infec]

if (any(meta.virome[meta.virome$InfantID ==  Infant & meta.virome$X.days %in% c(Start:End), c('ICD_simple_Diarrea','Vometing')] == "Y")) {
print(infec)
print(Virus)
print(meta.virome[meta.virome$InfantID ==  Infant & meta.virome$X.days %in% c(Start:End), c('X.days','ICD_simple_Diarrea','Vometing')] )#ICD_simple_gastrointestinal? , ICD_simple_Fever? 

ENTERICINFECTION$EntericSigns[infec]<- "Yes"
TABLE_melt_unique$EntericSigns[TABLE_melt_unique$infection == Virus &  TABLE_melt_unique$X.days  == Start & TABLE_melt_unique$InfantID == Infant]  <- "Yes"      
      
}
  
}



#######
#"Mamastrovirus 1b" & "Parechovirus Ac" --> it is the noro that is causing the symptoms
pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/","CumSum_unique_entericinfectionwithsigns_7d", subg,"_",subl,".pdf",sep="")) 

ggplot(data=TABLE_melt_unique, aes(y=CumSum_unique, x=X.days, color=InfantID)) + geom_line(size=1.5) + geom_point(size=2,aes(shape=EntericSigns)) + scale_color_LB_infants(8)  +
  theme_LB() + scale_shape_manual(values=c(NA,4))  +
 ggtitle(paste("Cumsum UNIQUE, Eukaryotic Viruses @ ", subl , " level","
Subgroup: ", Subgroups_names[which(Subgroups == subg)], sep=""))+
  xlab('Days After Birth')+
  ylab('Accumulation of Infections')
dev.off()

TABLE_melt_unique$genus <- as.character(TABLE_melt_unique$genus)
TABLE_melt_unique$family <- as.character(TABLE_melt_unique$family)
table(TABLE_melt_unique$genus[TABLE_melt_unique$EntericSigns == "Yes"])
table(TABLE_melt_unique$family[TABLE_melt_unique$EntericSigns == "Yes"])

PERGENUS <- as.data.frame(as.matrix(table(TABLE_melt_unique[TABLE_melt_unique$cs_eff == 1 &!is.na(TABLE_melt_unique$cs_eff), colnames(TABLE_melt_unique) %in%c ('genus','EntericSigns' )])))
PERGENUS <- as.data.frame(reshape(PERGENUS, idvar = "genus", timevar = "EntericSigns", direction="wide"))
PERGENUS$Freq.No <-  as.numeric(as.character(PERGENUS$Freq.No))
PERGENUS$Freq.Yes <-  as.numeric(as.character(PERGENUS$Freq.Yes))
PERGENUS$Percentage_Yes <- 0
for (r in 1:nrow(PERGENUS)){
  PERGENUS$Percentage_Yes[r] <- PERGENUS$Freq.Yes[r] /  sum(PERGENUS$Freq.Yes[r] + PERGENUS$Freq.No[r])
}

write.csv(PERGENUS, paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_unique_entericinfectionwithsigns_7d_overviewpergenus", subg,"_",subl,".csv",sep=""))

# cardiovirus doesn't cause diarrea?

}

OUTPUT <- list()
OUTPUT_STATS_PAIRED <- list()
# cumsum normal NORMALISED FOR #days 
for (e in events){
  TABLE_melt_max <- c('InfantID','event','Y_N','csum_event')
for (i in Infants){
max_Y <-  max(TABLE_melt$csum[TABLE_melt$InfantID == i & TABLE_melt[,colnames(TABLE_melt) == e] == "Y"])
time_Y <- max(TABLE_melt$X.days[TABLE_melt$InfantID == i & TABLE_melt$csum == max_Y &  TABLE_melt[,colnames(TABLE_melt) == e] == "Y"] )
samples_Y <- length(unique(TABLE_melt$Sample.ID[TABLE_melt$InfantID == i & TABLE_melt[,colnames(TABLE_melt) == e] == "Y"]))
max_N <- max(TABLE_melt$csum[TABLE_melt$InfantID == i & TABLE_melt[,colnames(TABLE_melt) == e] == "N"])
time_N <- max(TABLE_melt$X.days[TABLE_melt$InfantID == i & TABLE_melt$csum == max_N &  TABLE_melt[,colnames(TABLE_melt) == e] == "N"] )
samples_N  <- length(unique(TABLE_melt$Sample.ID[TABLE_melt$InfantID == i & TABLE_melt[,colnames(TABLE_melt) == e] == "N"]))



if (time_Y > time_N){
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'N',max_N/time_N))
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'Y',(max_Y - max_N)/(time_Y-time_N)))
}
if (time_N > time_Y){
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'N',(max_N-max_Y)/(time_N-time_Y)))
TABLE_melt_max  <-   rbind(TABLE_melt_max, c(i,e,'Y',(max_Y/time_Y)))
}

}
TABLE_melt_max <- as.data.frame(TABLE_melt_max)
colnames(TABLE_melt_max) <-  c('InfantID','event','Y_N','csum_event')
TABLE_melt_max <- TABLE_melt_max[grepl('S0',TABLE_melt_max$InfantID),]
TABLE_melt_max$csum_event <- as.numeric(as.character(TABLE_melt_max$csum_event))
TABLE_melt_max$Y_N <- as.character(TABLE_melt_max$Y_N)
ee <- ggplot(TABLE_melt_max, aes(x=Y_N,y=csum_event, fill=event, alpha=Y_N))+
  geom_boxplot()+
    geom_boxplot()+
  geom_point()+
  theme_LB()+ 
      scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors[which(events == e)])+
  theme(legend.position = "none")+

  xlab(paste(e,sep=""))+
  ylab(paste("CumSum per interval (normalised for time period before/after event)",sep=""))

library(rstatix)
stat.test <- as.data.frame( TABLE_melt_max  %>%
  wilcox_test(csum_event ~ Y_N, paired = FALSE) %>%
  add_significance())
stat.test$effectsize <- (TABLE_melt_max %>%  wilcox_effsize(csum_event ~ Y_N, paired = FALSE))$effsize
stat.test_paired <- as.data.frame( TABLE_melt_max  %>%
  wilcox_test(csum_event ~ Y_N, paired = TRUE) %>%
  add_significance())
stat.test_paired$effectsize <- (TABLE_melt_max %>%  wilcox_effsize(csum_event ~ Y_N, paired = TRUE))$effsize

ee <-   ee+ ggtitle(paste("Cumsum, Eukaryotic Viruses @ ", subl , " level","
Subgroup: ", Subgroups_names[which(Subgroups == subg)],'
Wilcoxontest p: ',wilcox.test(csum_event~Y_N, TABLE_melt_max)$p.value,"+  Effect size: ", stat.test$effectsize, '
Paired Wilcoxontest p: ',wilcox.test(csum_event~Y_N, TABLE_melt_max,paired=T)$p.value,"+  Effect size: ",stat.test_paired$effectsize, sep="")) 


pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/","CumSum_all_boxplot_NORMALISED_TIME_",e,'_', subg,"_",subl,".pdf",sep="")) 
plot(ee)
dev.off()

# cumsum unique
  TABLE_melt_unique_max <- c('InfantID','event','Y_N','CumSum_unique_event')
for (i in Infants){
max_Y <-  max(TABLE_melt_unique$CumSum_unique[TABLE_melt_unique$InfantID == i & TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "Y"])
time_Y <- max(TABLE_melt_unique$X.days[TABLE_melt_unique$InfantID == i & TABLE_melt_unique$CumSum_unique == max_Y &  TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "Y"] )
max_N <- max(TABLE_melt_unique$CumSum_unique[TABLE_melt_unique$InfantID == i & TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "N"])
time_N <- max(TABLE_melt_unique$X.days[TABLE_melt_unique$InfantID == i & TABLE_melt_unique$CumSum_unique == max_N &  TABLE_melt_unique[,colnames(TABLE_melt_unique) == e] == "N"] )

if (time_Y > time_N){
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'N',max_N/time_N))
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'Y',(max_Y - max_N)/(time_Y-time_N)))
}
if (time_N > time_Y){
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'N',(max_N-max_Y)/(time_N-time_Y)))
TABLE_melt_unique_max  <-   rbind(TABLE_melt_unique_max, c(i,e,'Y',(max_Y/time_Y)))
}


}
TABLE_melt_unique_max <- as.data.frame(TABLE_melt_unique_max)
colnames(TABLE_melt_unique_max) <-  c('InfantID','event','Y_N','CumSum_unique_event')
TABLE_melt_unique_max <- TABLE_melt_unique_max[grepl('S0',TABLE_melt_unique_max$InfantID),]
TABLE_melt_unique_max$CumSum_unique_event <- as.numeric(as.character(TABLE_melt_unique_max$CumSum_unique_event))
TABLE_melt_unique_max$Y_N <- as.character(TABLE_melt_unique_max$Y_N)
ee <- ggplot(TABLE_melt_unique_max, aes(x=Y_N,y=CumSum_unique_event, fill=event, alpha=Y_N))+
  geom_boxplot()+
    geom_boxplot()+
  geom_point()+
  theme_LB()+ 
    scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors[which(events == e)])+
  theme(legend.position = "none")+
  xlab(paste(e,sep=""))+
    ylab(paste("Unique CumSum per interval (normalised for time period before/after event)",sep=""))


library(rstatix)
stat.unique_test <- as.data.frame( TABLE_melt_unique_max  %>%
  wilcox_test(CumSum_unique_event ~ Y_N, paired = FALSE) %>%
  add_significance())
stat.unique_test$effectsize <- (TABLE_melt_unique_max %>%  wilcox_effsize(CumSum_unique_event ~ Y_N, paired = FALSE))$effsize
stat.unique_test_paired <- as.data.frame( TABLE_melt_unique_max  %>%
  wilcox_test(CumSum_unique_event ~ Y_N, paired = TRUE) %>%
  add_significance())
stat.unique_test_paired$effectsize <- (TABLE_melt_unique_max %>%  wilcox_effsize(CumSum_unique_event ~ Y_N, paired = TRUE))$effsize

ee <-   ee+ ggtitle(paste("Unique Cumsum, Eukaryotic Viruses @ ", subl , " level","
Subgroup: ", Subgroups_names[which(Subgroups == subg)],'
Wilcoxontest p: ',wilcox.test(CumSum_unique_event~Y_N, TABLE_melt_unique_max)$p.value,"+  Effect size: ", stat.unique_test$effectsize, '
Paired Wilcoxontest p: ',wilcox.test(CumSum_unique_event~Y_N, TABLE_melt_unique_max,paired=T)$p.value,"+  Effect size: ",stat.unique_test_paired$effectsize, sep="")) 




pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_all_boxplot_NORMALISED_TIME_",e,'_', subg,"_",subl,".pdf",sep="")) 
plot(ee)
dev.off()


  OUTPUT[[which(events == e)]] <- as.data.frame(merge(TABLE_melt_max, TABLE_melt_unique_max,  by=c('InfantID','event','Y_N')) )
  stats  <- as.data.frame(rbind(stat.test_paired, stat.unique_test_paired) )
  stats$event <- e
  OUTPUT_STATS_PAIRED[[which(events == e)]] <- stats
  }
output <- do.call(rbind,OUTPUT)
write.csv(output,paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/","CumSum_OUTPUT_events_NORMALISED_TIME_",e,'_', subg,"_",subl,".csv",sep="")) 
output_stats_paired <- do.call(rbind,OUTPUT_STATS_PAIRED)
for (variable in unique(output_stats_paired$.y. )){
  output_stats_paired$p_adjustedFDR[output_stats_paired$.y. == variable] <- p.adjust( output_stats_paired$p[output_stats_paired$.y. == variable], method = 'BH')

}

write.csv(output_stats_paired, paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_OUTPUT_stats_paired_events_NORMALISED_TIME",e,'_', subg,"_",subl,".csv",sep="")) 
output_ <- melt(output, id.vars=c('InfantID','event','Y_N'))
output_$variable <- as.character(output_$variable)
output_$variable[output_$variable == 'CumSum_unique_event'] <- "UniqueCumSum" 
output_$variable[output_$variable == 'csum_event'] <- "CumSum" 

zz <- ggplot(output_, aes(x=Y_N,y=value, fill=event, alpha=Y_N))+
  geom_boxplot()+
   geom_point()+
  geom_line(aes(group=InfantID))+
  theme_LB()+ 
  facet_grid(variable~event, scales = 'free') +
    scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors)+
  theme(legend.position = "none")+
    ylab(paste("CumSum per interval (normalised for time period before/after event)",sep=""))

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_boxplot_NORMALISED_TIME_ALL_events_", subg,"_",subl,".pdf",sep="")) 
plot(zz)
dev.off()


zzx <- ggplot(output_[output_$variable == "CumSum", ], aes(x=Y_N,y=value, fill=event, alpha=Y_N))+
  geom_boxplot()+
  geom_point()+
  geom_line(aes(group=InfantID))+
  theme_LB()+ 
  facet_grid(~event, scales = 'free') +
    scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors)+
  theme(legend.position = "none")+
    ylab(paste("CumSum per interval (normalised for time period before/after event)",sep=""))

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/", "CumSum_boxplot_ALL_events_cumsum_NORMALISED_TIME_", subg,"_",subl,".pdf",sep=""), width=10, height=3) 
plot(zzx)
dev.off()

zzx <- ggplot(output_[output_$variable == "UniqueCumSum", ], aes(x=Y_N,y=value, fill=event, alpha=Y_N))+
  geom_boxplot()+
  geom_point()+
  geom_line(aes(group=InfantID))+
  theme_LB()+ 
  facet_grid(~event, scales = 'free') +
    scale_alpha_manual(values = c(0.5,1))+
  scale_fill_manual(values=events_colors)+
  theme(legend.position = "none")+
    ylab(paste("Unique CumSum per interval  (normalised for time period before/after event)",sep=""))

pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Accumulation/","CumSum_boxplot_ALL_events_cumsum_unique_NORMALISED_TIME_", subg,"_",subl,".pdf",sep=""), width=10, height=3) 
plot(zzx)
dev.off()

## sara
#mod0: Y~time
#mod1: Y~time+DC
# anova(mod0,mod1)
}



@
\subsection*{Stacked area plots}
<<stacked area per infant, reads, ANIMALINFECTINGVIRUSES>>=
dir.create(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/", sep=""))

table <- tax_glom(ps_virome_VIRUS_EukaryoticVirome_reads, taxrank = "genus")

  for (infant in Infants){
  
ps_virome_infant = subset_samples(table, InfantID %in% infant)  %>% prune_taxa(taxa_sums(.) >0, .)
ps_virome_infant_abundance_melt_procent <- psmelt(ps_virome_infant) 
ps_virome_infant_abundance_melt_procent <- ps_virome_infant_abundance_melt_procent[ps_virome_infant_abundance_melt_procent$family %in% DaMiV, ]
ps_virome_infant_abundance_melt_procent$Abundance[ps_virome_infant_abundance_melt_procent$Abundance < 100] <- 0

vaccc <- VACC[VACC$InfantID == infant,2]
dcc <- DC[DC$InfantID == infant,2]
diett <- diet[diet$InfantID == infant,]

ps_virome_infant_abundance_melt_procent_test<-merge(ps_virome_infant_abundance_melt_procent,expand.grid(X.days=unique(ps_virome_infant_abundance_melt_procent$X.days),OTU=unique(ps_virome_infant_abundance_melt_procent$OTU),stringsAsFactors=F),all.y=T)
ps_virome_infant_abundance_melt_procent_test$Abundance[is.na(ps_virome_infant_abundance_melt_procent_test$Abundance)]<-0

## OTU_level
MAX <-  max(aggregate(Abundance ~X.days, ps_virome_infant_abundance_melt_procent_test, sum)$Abundance) 

STACKED_OTU <- ggplot(ps_virome_infant_abundance_melt_procent_test, aes(x=X.days,y=Abundance,fill=OTU)) + 
  geom_area(aes(y=Abundance, group=OTU, fill=OTU),position = 'stack') +
  scale_fill_LB(length(unique(ps_virome_infant_abundance_melt_procent_test$OTU)))+
  xlab("Days after birth") +
  ylim(-MAX*0.04 ,(MAX+(MAX*5/100)))+
  ylab("Rarefied Reads of Genera") +
  geom_vline(size=1.5, xintercept = vaccc, colour = "black")+
  geom_vline(size=1.5, xintercept = dcc, colour = "red")+
  geom_segment(size=1.5, x=diett[diett$DIET=='Breast',colnames(diett)=='start'],xend=diett[diett$DIET=='Breast',colnames(diett)=='end'],y=-(MAX*0.01),yend=-(MAX*0.01), color="Deepskyblue4")+
    geom_segment(size=1.5, x=diett[diett$DIET=='Vegetables',colnames(diett)=='start'],xend=diett[diett$DIET=='Vegetables',colnames(diett)=='end'],y=-(MAX*0.03),yend=-(MAX*0.03), color="Darkolivegreen4")+
      geom_segment(size=1.5, x=diett[diett$DIET=='Fruit',colnames(diett)=='start'],xend=diett[diett$DIET=='Fruit',colnames(diett)=='end'],y=-(MAX*0.04),yend=-(MAX*0.04), color="Darkolivegreen2")+
geom_point(aes(x=X.days, y=0))+
    theme_LB()
    for (i in count(diett$DIET=='Formula')) {
    x <- diett[diett$DIET=='Formula',colnames(diett)=='start'][i] 
    xend <- diett[diett$DIET=='Formula',colnames(diett)=='end'][i] 
    STACKED_OTU <- STACKED_OTU + geom_segment(size=1.5, x=x, xend=xend,y=-(MAX*0.02),yend=-(MAX*0.02), color="Deepskyblue3")
    }

   pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/", "StackedAreaplot_OTU_reads", infant,"_DaMiV.pdf",sep=""), width = 15 , height = 10 )
  
  print(STACKED_OTU)
 dev.off()  

## Genus-level
ps_virome_infant_abundance_melt_procent_test$genus <- as.character(ps_virome_infant_abundance_melt_procent_test$genus)
ps_virome_infant_abundance_melt_procent_test$genus[ps_virome_infant_abundance_melt_procent_test$family == "Anelloviridae"] <- "Anelloviridae" 
ps_virome_infant_abundance_melt_procent_test$genus[ps_virome_infant_abundance_melt_procent_test$family %in% c("Circoviridae","CRESS viruses","Genomoviridae")] <- "Small Circular Viruses" 
ps_virome_infant_abundance_melt_procent_test <- ps_virome_infant_abundance_melt_procent_test[!ps_virome_infant_abundance_melt_procent_test$family == "Picobirnaviridae", ]

 
ps_virome_infant_abundance_melt_procent_test_AGG <- aggregate(Abundance ~genus+X.days  , FUN=sum, data=ps_virome_infant_abundance_melt_procent_test)
ps_virome_infant_abundance_melt_procent_test_Genus <- merge(ps_virome_infant_abundance_melt_procent_test_AGG, ps_virome_infant_abundance_melt_procent_test[,!colnames(ps_virome_infant_abundance_melt_procent_test) %in% c('Abundance','OTU',"species","family","superkingdom","kingdom",'Host','Host_specific','ContigBin','PhageBin','EukVirBin','EukVirBin_noanello','ContigBin','EukVirBin','EukVirBin_noanello','VC','VC_Genus')], by=c("genus","X.days"), all.x=F) 

ps_virome_infant_abundance_melt_procent_test_Genus <- ps_virome_infant_abundance_melt_procent_test_Genus[!duplicated(ps_virome_infant_abundance_melt_procent_test_Genus), ]
ps_virome_infant_abundance_melt_procent_test_Genus<-merge(ps_virome_infant_abundance_melt_procent_test_Genus,expand.grid(X.days=unique(ps_virome_infant_abundance_melt_procent_test_Genus$X.days),genus=unique(ps_virome_infant_abundance_melt_procent_test_Genus$genus),stringsAsFactors=F),all.y=T)
ps_virome_infant_abundance_melt_procent_test_Genus$Abundance[is.na(ps_virome_infant_abundance_melt_procent_test_Genus$Abundance)]<-0
MAX <-  max(aggregate(Abundance ~X.days, ps_virome_infant_abundance_melt_procent_test_Genus, sum)$Abundance) 

STACKED_Genus <- ggplot(ps_virome_infant_abundance_melt_procent_test_Genus, aes(x=X.days,y=Abundance,fill=genus)) + 
  geom_area(aes(y=Abundance, group=genus, fill=genus),position = 'stack') +
  scale_fill_LB(length(unique(ps_virome_infant_abundance_melt_procent_test_Genus$genus)))+
  xlab("Days after birth") +
  ylim(-MAX*0.04 ,(MAX+(MAX*5/100)))+
  ylab("Rarefied Reads of Genera") +
  geom_vline(size=1.5, xintercept = vaccc, colour = "black")+
  geom_vline(size=1.5, xintercept = dcc, colour = "red")+
  geom_segment(size=1.5, x=diett[diett$DIET=='Breast',colnames(diett)=='start'],xend=diett[diett$DIET=='Breast',colnames(diett)=='end'],y=-(MAX*0.01),yend=-(MAX*0.01), color="Deepskyblue4")+
    geom_segment(size=1.5, x=diett[diett$DIET=='Vegetables',colnames(diett)=='start'],xend=diett[diett$DIET=='Vegetables',colnames(diett)=='end'],y=-(MAX*0.03),yend=-(MAX*0.03), color="Darkolivegreen4")+
      geom_segment(size=1.5, x=diett[diett$DIET=='Fruit',colnames(diett)=='start'],xend=diett[diett$DIET=='Fruit',colnames(diett)=='end'],y=-(MAX*0.04),yend=-(MAX*0.04), color="Darkolivegreen2")+
geom_point(aes(x=X.days, y=0))+
    theme_LB()
    for (i in count(diett$DIET=='Formula')) {
    x <- diett[diett$DIET=='Formula',colnames(diett)=='start'][i] 
    xend <- diett[diett$DIET=='Formula',colnames(diett)=='end'][i] 
    STACKED_Genus <- STACKED_Genus + geom_segment(size=1.5, x=x, xend=xend,y=-(MAX*0.02),yend=-(MAX*0.02), color="Deepskyblue3")
    }

   pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/","StackedAreaplot_Genus_reads", infant,"_DaMiV.pdf",sep=""), width = 15 , height = 10 )
  
  print(STACKED_Genus)
 dev.off()  
 

            FirstDay <- min(ps_virome_infant_abundance_melt_procent_test_Genus$X.days)
            FirstSample <-   as.Date(unique(ps_virome_infant_abundance_melt_procent_test_Genus$Sample.Date[ps_virome_infant_abundance_melt_procent_test_Genus$X.days == FirstDay]), format="%d/%m/%Y")
            BirthDay <- FirstSample -  FirstDay
            LastDay <-  max(ps_virome_infant_abundance_melt_procent_test_Genus$X.days)
            LastSample <-   as.Date(unique(ps_virome_infant_abundance_melt_procent_test_Genus$Sample.Date[ps_virome_infant_abundance_melt_procent_test_Genus$X.days == LastDay]), format="%d/%m/%Y")
      DATES <-  as.data.frame(cbind(c(0:LastDay),cbind(c(0:LastDay))))
      colnames(DATES) <- c('DaysAfterBirth','Date')  
      DATES$Date <- seq(BirthDay,LastSample, by="days")

      months = c("01","02","03","04","05","06","07","08","09","10","11","12")
      months_names = c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
    for (d in 1:12){
    STACKED_Genus <- STACKED_Genus + 
      geom_text(x= max(DATES$DaysAfterBirth[grepl(paste("-",months[d],"-01", sep=""), DATES$Date)])+ 15, y=MAX, label=months_names[d], color="brown")+
      geom_vline(xintercept= max(DATES$DaysAfterBirth[grepl(paste("-",months[d],"-01", sep=""), DATES$Date)]), color="brown")
    }
  STACKED_Genus <-     STACKED_Genus+
        ggtitle(paste("Genus abundance over time, infant ", toString(infant), ", born at ", BirthDay,sep="")) 

    if (!infant %in% c("S005","S010")) {   STACKED_Genus <-     STACKED_Genus+geom_text(x= 0+1, y=MAX, label=months_names[month(BirthDay)], color="brown")}
  if (infant == "S004") {  STACKED_Genus <- STACKED_Genus + 
      geom_text(x= min(DATES$DaysAfterBirth[grepl(paste("-",months[3],"-01", sep=""), DATES$Date)])+ 15, y=MAX, label=months_names[3], color="brown")+
      geom_vline(xintercept= min(DATES$DaysAfterBirth[grepl(paste("-",months[3],"-01", sep=""), DATES$Date)]), color="brown")}

     pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/","StackedAreaplot_Genus_reads_withdates_", infant,"_DaMiV.pdf",sep=""), width = 15 , height = 10 )
  
  print(STACKED_Genus)
 dev.off()
 
 
STACKED_OTU <- ggplot(ps_virome_infant_abundance_melt_procent_test, aes(x=X.days,y=Abundance,fill=OTU)) + 
  geom_area(aes(y=Abundance, group=OTU, fill=OTU),position = 'stack') +
  scale_fill_LB(length(unique(ps_virome_infant_abundance_melt_procent_test$OTU)))+
  xlab("Days after birth") +
  ylim(-MAX*0.04 ,(MAX+(MAX*5/100)))+
  ylab("Reads") +
  geom_vline(size=1.5, xintercept = vaccc, colour = "black")+
  geom_vline(size=1.5, xintercept = dcc, colour = "red")+
  geom_segment(size=1.5, x=diett[diett$DIET=='Breast',colnames(diett)=='start'],xend=diett[diett$DIET=='Breast',colnames(diett)=='end'],y=-(MAX*0.01),yend=-(MAX*0.01), color="Deepskyblue4")+
    geom_segment(size=1.5, x=diett[diett$DIET=='Vegetables',colnames(diett)=='start'],xend=diett[diett$DIET=='Vegetables',colnames(diett)=='end'],y=-(MAX*0.03),yend=-(MAX*0.03), color="Darkolivegreen4")+
      geom_segment(size=1.5, x=diett[diett$DIET=='Fruit',colnames(diett)=='start'],xend=diett[diett$DIET=='Fruit',colnames(diett)=='end'],y=-(MAX*0.04),yend=-(MAX*0.04), color="Darkolivegreen2")+
geom_point(aes(x=X.days, y=0))+
    theme_LB()
    for (i in count(diett$DIET=='Formula')) {
    x <- diett[diett$DIET=='Formula',colnames(diett)=='start'][i] 
    xend <- diett[diett$DIET=='Formula',colnames(diett)=='end'][i] 
    STACKED_OTU <- STACKED_OTU + geom_segment(size=1.5, x=x, xend=xend,y=-(MAX*0.02),yend=-(MAX*0.02), color="Deepskyblue3")
    }

   pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/", "StackedAreaplot_OTU_reads", infant,"_DaMiV.pdf",sep=""), width = 15 , height = 10 )
  
  print(STACKED_OTU)
 dev.off()  

 
  }

  
@
<<stacked  per infant combined, reads, ANIMALINFECTINGVIRUSES>>=
table <- tax_glom(ps_virome_VIRUS_EukaryoticVirome_reads, taxrank = "genus")
Normalisation <- "Reads"
list_infants <- list()
TABLE <- table
if(level %in% levels[2:3]){
tax_table(TABLE)[,3][tax_table(TABLE)[,2] == "Anelloviridae"] <- "Anelloviridae"  
tax_table(TABLE)[,3][tax_table(TABLE)[,2] %in% c("Circoviridae","Circovirus","CRESS viruses","Genomoviridae")] <- "small circular"  
}
Infants <- sort(Infants)
for (infant in 1:length(Infants)){
ps_infant = subset_samples(TABLE, InfantID %in% Infants[infant])  %>% prune_taxa(taxa_sums(.) > 0, .)
ps_infant_melt <- psmelt(ps_infant) 
ps_infant_melt <- ps_infant_melt[ps_infant_melt$family %in% DaMiV,]


ps_infant_melt_test<-merge(ps_infant_melt,expand.grid(X.days=unique(ps_infant_melt$X.days),OTU=unique(ps_infant_melt$OTU),stringsAsFactors=F),all.y=T)
ps_infant_melt$Abundance[is.na(ps_infant_melt_test$Abundance)]<-0
ps_infant_melt_test$Abundance[ps_infant_melt_test$Abundance < 100]<-0
list_infants[[infant]] <- ps_infant_melt_test
}

ps_infant_abundance_melt_ALL <- do.call(rbind, list_infants)
FILTER <- aggregate(Abundance~genus, ps_infant_abundance_melt_ALL, sum)
ps_infant_abundance_melt_ALL <- ps_infant_abundance_melt_ALL[!ps_infant_abundance_melt_ALL$genus %in% FILTER$genus[FILTER$Abundance < 150],]

## genus-level
 
ps_infant_abundance_melt_procent_test_ALL_genus <- aggregate(Abundance ~genus+X.days+InfantID  , FUN=sum, data=ps_infant_abundance_melt_ALL)
ps_infant_abundance_melt_procent_test_ALL_genus$Abundance[ps_infant_abundance_melt_procent_test_ALL_genus$Abundance < 0.1]<-0

for (genus in unique(ps_infant_abundance_melt_procent_test_ALL_genus$genus)){
  if (sum(ps_infant_abundance_melt_procent_test_ALL_genus$Abundance[ps_infant_abundance_melt_procent_test_ALL_genus$genus == genus]) == 0){
    ps_infant_abundance_melt_procent_test_ALL_genus <- ps_infant_abundance_melt_procent_test_ALL_genus[!ps_infant_abundance_melt_procent_test_ALL_genus$genus == genus,]
  }}


STACKED_genus <- ggplot(ps_infant_abundance_melt_procent_test_ALL_genus, aes(x=X.days,y=Abundance,fill=genus)) + 
  geom_area(aes(y=Abundance, group=genus, fill=genus),position = 'stack') +
  facet_wrap(~InfantID,  ncol=4)+
  scale_fill_LB(length(unique(ps_infant_abundance_melt_procent_test_ALL_genus$genus)))+
  xlab("Days after birth") +
  theme_LB()+
  theme(legend.position="bottom", legend.title = element_text(size = 6), legend.text = element_text(size = 6))+ 
  guides(fill=guide_legend(nrow = 4)) +
  ylab("Abundance of Genera") +
  ggtitle(paste("genus abundance over time,", Normalisation,sep="")) + 
  geom_vline(size=1.5, data = vaccc, mapping = aes(xintercept = X.days), colour = "black")+
  geom_vline(size=1.5, data = dcc, mapping = aes(xintercept = X.days), colour = "red")+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.01*200000,yend=-0.01*200000), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.03*200000,yend=-0.03*200000), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.04*200000,yend=-0.04*200000), color="Darkolivegreen2",inherit.aes = F)+
geom_point(aes(x=X.days, y=0), size=1)

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    STACKED_genus <- STACKED_genus + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-0.02*200000,yend=-0.02*200000), color="Deepskyblue3",inherit.aes = F)
          }

 pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/", "Stackedplot_genus_ALL_reads_DaMiV.pdf",sep=""), width = 18 , height = 10 )
  print(STACKED_genus + theme(legend.position = "none"))
 dev.off() 
 
 pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/","Stackedplot_genus_ALL_legend_reads_DaMiV.pdf",sep="") )
   plot(cowplot::get_legend(STACKED_genus))
 dev.off() 


 # family

ps_infant_abundance_melt_procent_test_ALL_family<- aggregate(Abundance ~family+X.days+InfantID  , FUN=sum, data=ps_infant_abundance_melt_ALL)
ps_infant_abundance_melt_procent_test_ALL_family$Abundance[ps_infant_abundance_melt_procent_test_ALL_family$Abundance < 0.05]<-0

for (family in unique(ps_infant_abundance_melt_procent_test_ALL_family$family)){
  if (sum(ps_infant_abundance_melt_procent_test_ALL_family$Abundance[ps_infant_abundance_melt_procent_test_ALL_family$family == family]) == 0){
    ps_infant_abundance_melt_procent_test_ALL_family <- ps_infant_abundance_melt_procent_test_ALL_family[!ps_infant_abundance_melt_procent_test_ALL_family$family == family,]
  }}


STACKED_family <- ggplot(ps_infant_abundance_melt_procent_test_ALL_family, aes(x=X.days,y=Abundance,fill=family)) + 
  geom_area(aes(y=Abundance, group=family, fill=family),position = 'stack') +
  facet_wrap(~InfantID,  ncol=4)+
  scale_fill_LB(length(unique(ps_infant_abundance_melt_procent_test_ALL_family$family)))+
  xlab("Days after birth") +
  theme_LB()+
  theme(legend.position="right", legend.title = element_text(size = 6), legend.text = element_text(size = 6))+ 
  guides(fill=guide_legend(ncol = 2)) +
  ylab("Abundance of Genera") +
  ggtitle(paste("family abundance over time,", Normalisation,sep="")) + 
  geom_vline(size=1.5, data = vaccc, mapping = aes(xintercept = X.days), colour = "black")+
  geom_vline(size=1.5, data = dcc, mapping = aes(xintercept = X.days), colour = "red")+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.01*200000,yend=-0.01*200000), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.03*200000,yend=-0.03*200000), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.04*200000,yend=-0.04*200000), color="Darkolivegreen2",inherit.aes = F)+
geom_point(aes(x=X.days, y=0), size=1)

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    STACKED_family <- STACKED_family + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-0.02*200000,yend=-0.02*200000), color="Deepskyblue3",inherit.aes = F)
          }

 
pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/", "Stackedplot_Family_ALL__DaMiV.pdf_reads",sep="") , width = 18 , height = 10 )  
print(STACKED_family + theme(legend.position = "none"))
 dev.off() 
 
pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/AbundanceAnalysis/StackedAreaPlots/", "Stackedplot_Family_ALL_legend_reads_DaMiV.pdf",sep="") )
   plot(cowplot::get_legend(STACKED_family))
 dev.off() 


  @
\subsection*{Alpha-diversity}
<<Alpha-diversity, All Samples ANELLO>>=
table <- ps_virome_VIRUS_EukaryoticVirome_reads
TABLE <-  subset_taxa(table, family == "Anelloviridae")

for (effect in 1:length(FIXEDEFFECTS_simple_Virome_ctu)){

   
All_measures <- plot_richness(TABLE, x= paste(FIXEDEFFECTS_simple_Virome_ctu[effect]), color="InfantID", nrow =2, measures = c("Observed", "Shannon"))+
  geom_line()+
 # scale_color_manual(values= rev(c(viridis(4,1, begin=0.2, end = 0.9), rev(plasma(4,1, begin=0.3, end = 1)))))+
  scale_color_LB_infants(8)+
  geom_smooth(colour='white', span=0.2, method="loess")+
  ggtitle(paste("Alpha Diversity (Anelloviridae), All samples, ", Normalisation, sep="")) + 
  theme_LB() +
  xlab("Days after birth")+
  facet_wrap(~variable,scales="free_y", ncol=1)

  pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Alpha/", FIXEDEFFECTS_simple_Virome_ctu[effect], "_", "AllMeasures_AllSamples_Anelloviridae.pdf",sep=""))  
  print(All_measures)
  dev.off()
 

All_measures <- plot_richness(TABLE, x= paste(FIXEDEFFECTS_simple_Virome_ctu[effect]), color="InfantID", nrow =2, measures = c("Observed"))+
  geom_line()+
  facet_wrap(~InfantID, nrow=2)+
  scale_color_LB_infants(8)+
  ggtitle(paste("Alpha Diversity (Anelloviridae), All samples, ", Normalisation, sep="")) + 
  theme_LB() +
  xlab("Days after birth")+
  geom_vline(size=1.5, data = vaccc, mapping = aes(xintercept = X.days), colour = "black")+
  geom_vline(size=1.5, data = dcc, mapping = aes(xintercept = X.days), colour = "red")+
  geom_segment(size=1.5, data = diett[diett$DIET=='Breast',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.01*200,yend=-0.01*200), color="Deepskyblue4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Vegetables',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.03*200,yend=-0.03*200), color="Darkolivegreen4",inherit.aes = F)+
  geom_segment(size=1.5, data = diett[diett$DIET=='Fruit',c(1,3,4)] ,
              mapping = aes(x=start, xend=end,y=-0.04*200,yend=-0.04*200), color="Darkolivegreen2",inherit.aes = F)+
geom_point(aes(x=X.days, y=0), size=1)

    formula = diett[diett$DIET=='Formula',c(1,3,4)]
    for (i in 1:nrow(formula)) {
    All_measures <- All_measures + geom_segment(size=1.5, data = formula[i,] ,
              mapping = aes(x=start, xend=end,y=-0.02*200,yend=-0.02*200), color="Deepskyblue3",inherit.aes = F)
          }


  pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Alpha/",  FIXEDEFFECTS_simple_Virome_ctu[effect], "_", "AllMeasures_AllSamples_Anelloviridae_diet.pdf",sep=""), width=10, height=5) 
  print(All_measures + theme(legend.position = "none"))  
  dev.off()
}
for (effect in FIXEDEFFECTS_simple_Virome_categorical){
  
  niv <- dim(unique(sample_data(TABLE)[,paste(effect)]))[1]
  if( niv == 2 ) {testresult<- t(sapply(estimate_richness(TABLE, measures = c("Observed",  "Shannon")), function(x) unlist(wilcox.test(x ~ as(sample_data(TABLE)[,paste(effect)], "data.frame")[,1])[c("p.value")] )))}
  if(niv > 2 ) {testresult<- t(sapply(estimate_richness(TABLE, measures = c("Observed",  "Shannon")),function(x) unlist(kruskal.test(x ~ as.factor(as(sample_data(TABLE)[,paste(effect)], "data.frame")[,1]))[c("p.value")] )))}

BOXPLOT_effect <- plot_richness(TABLE, color = paste(effect), x = paste(effect), measures =
 c("Observed", "Shannon")) + 
  geom_boxplot(alpha=0.2)+
  scale_color_LB(number_of_colors = niv)+
  theme_LB() +
  facet_wrap(~variable,scales="free_y", nrow=1)

  if ( niv == 2 ) {BOXPLOT_effect <- BOXPLOT_effect + ggtitle(paste("Alpha Diversity (Anelloviridae) by, All samples, ", Normalisation,"
Observed, wilcox p: ", (testresult[1]),"
Shannon, wilcox p: ",(testresult[2]),"
Simpson, wilcox p: ",(testresult[3]),sep=""))
    } 
  if(niv > 2) {BOXPLOT_effect <- BOXPLOT_effect + ggtitle(paste("Alpha Diversity by, All samples, ", Normalisation, "
Observed, kruskal p: ", (testresult[1]),"
Shannon, kruskal p: ",(testresult[2]),"
Simpson, kruskal p: ",(testresult[3]),sep=""))}

 pdf(paste(Workdir,"Output_EukaryoticVirome_", format(Sys.time(), "%Y-%m-%d"), "/Alpha/", effect,"_","AllMeasures_AllSamples_anelloviridae.pdf",sep=""))     
 print(BOXPLOT_effect)
  dev.off()
}


  
  @ 
\end{document}